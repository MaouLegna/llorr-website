---
title: "THE META REPORT NAME IS TOO LONG, TOO DAMN LONG (nÂ°13)"
subtitle: "Guardian of the Ancient Sesonal - Part2 - Decks and Line Ups"
date: "2021/06/28"
author: "by Legna"
output:   
  bookdown::html_document2:
    toc: true
    toc_float:
      collapsed: false
    number_sections: false
    fig_width: 9
    df_print: kable
---

```{css, echo=FALSE}
    body .main-container {
      max-width: 1800px !important;
      # width: 1800px !important;
      margin-left: auto;
      margin-right: auto;
    }
    body {
      # max-width: 1920px !important;
      background-color: whitesmoke;
    }
```

```{r knitr-opts}
knitr::opts_chunk$set(echo = FALSE,
                      comment = NA,
                      warning = FALSE,
                      error = FALSE,
                      message = FALSE,
                      tidy = TRUE)

knitr::opts_knit$set(root.dir = file.path("C:","LlorR"))
xaringanExtra::use_panelset()
```


```{r setup, include=FALSE}
path.DT <- file.path("C:","Users","Valentino Vazzoler","Desktop","R - LoR","Runeterra")
source(file.path(path.DT, paste("LoR_main", ".R", sep="")))

use_python("C:/anaconda/")
py_run_string("print('Hello World')")
lor_deckcodes <- import("lor_deckcodes")
py_module_available("lor_deckcodes")
```

---

Note: Since I still lack too much knowledge regarding line-up building I tried to analyze the results but I lack the confidence about their meaning. So aside for the obvious takes this document will be mostly dry and left to the end of those able to navigate the data. I'll try to improve by next Seasonal.

# **Data** {.unnumbered}

```{r raw-data, echo=FALSE, results="hide"}
path.DT   <- file.path("C:","Users","Valentino Vazzoler","Desktop","R - LoR","Runeterra")
fileDT    <- dir(path.DT, pattern = "LoR_MatchDT_", full.names = TRUE) %>% max()
header <- fread(fileDT, header = FALSE, na.strings = c("",NA), nrows = 1, stringsAsFactors = FALSE)
LoR.Match.RMD   <- fread(fileDT, header = FALSE, na.strings = c("",NA), skip = (1244990)) 
colnames( LoR.Match.RMD ) <- unlist(header)

fileDT_ACCOUNT  <- list.files(path = path.DT, pattern = "LoR_ACCOUNT_") %>% max()
LoR.Account.RMD <- fread(file.path(path.DT,fileDT_ACCOUNT), header=T, na.strings = c("",NA), encoding = 'UTF-8')

LoR.Deck        <- fread(file.path("C:","Users","Valentino Vazzoler","Desktop","R - LoR","Runeterra","LoR_DECK.csv"),na.strings = c("",NA))
```

```{r sample-games, echo=FALSE}
# Filter the players / game type / patch
Seasonal <- LoR.Match.RMD %>%
  filter( str_detect(game_mode, 'Seasonal') & str_detect(game_version, '2_10') ) %>% copy()
  # filter( game_start_time_utc < as.POSIXct('2021-06-21 00:00:00', tz="UTC") )

# Bracket <- LoR.Match.RMD %>%
#   filter( str_detect(game_mode, 'Seasonal') & str_detect(game_version, '2_10') ) %>% copy() %>%
#   filter( game_start_time_utc > as.POSIXct('2021-06-21 00:00:00', tz="UTC") )
  
nGames <- NROW(Seasonal %>%
  filter( game_start_time_utc < as.POSIXct('2021-06-21 00:00:00', tz="UTC") ))
# SeSeasonalPuuid   <- Seasonal %>% select(puuid_1,puuid_2) %>% unlist(.,use.names = F) %>% unique()
# Seasonal[,table(game_version)]
```

```{r base-data, include=FALSE}
LoR.Account.RMD[ activeShard=="europe"   & seasonal=="seasonal", .N]
LoR.Account.RMD[ activeShard=="americas" & seasonal=="seasonal", .N]
LoR.Account.RMD[ activeShard=="asia"     & seasonal=="seasonal", .N]

Seasonal[server=="europe"   & game_start_time_utc < as.POSIXct('2021-06-21 00:00:00', tz="UTC"),.N]
Seasonal[server=="americas" & game_start_time_utc < as.POSIXct('2021-06-21 00:00:00', tz="UTC"),.N]

Seasonal[server=="europe"   & game_start_time_utc > as.POSIXct('2021-06-21 00:00:00', tz="UTC"),.N]
Seasonal[server=="americas" & game_start_time_utc > as.POSIXct('2021-06-21 00:00:00', tz="UTC"),.N]
Seasonal[server=="asia"     & game_start_time_utc > as.POSIXct('2021-06-21 00:00:00', tz="UTC"),.N]

# [1] 1006
# [1] 1014
# [1] 272
# [1] 7484
# [1] 7510
```


Before starting this report on the latest Seasonal (Guardian of the Ancient, which started on 2021-06-19) I need to forewarn that it's pretty much impossible to determine the exact amount of games played during the "Open Rounds". It's possible to have an approximation not nothing more since we don't know the precise amount of forfeits. What we can say for certain is the amount of the max number of games possible:

- Max number of games: 1024 players for each shard * 9 rounds * 3 games (Bo3) / 2 (as a match is already between two players) -> `r 1024*9*3/2` games at most.

Games recovered:

- EU Shard: `r Seasonal[server=="europe",  .N]`
- NA Shard: `r Seasonal[server=="americas",.N]`
- Asia Shard: `r Seasonal[server=="asia",  .N]`

While the methodology to collect the data was always the same, there seems to be some kind of problems(?)/error(?) with the Asian Shards numbers. Sadly this was to be expected for the most part. To be eligible to participate one either had to win a slot through the LastChanceGauntlet or by being a top700 Master player but during the cut-off it turns out there were about ~465 Asian Master players. I don't know if Diamond players completed the remaining spots but overall this is pretty much the best I can do for this Seasonal

Regarding the EU and NA Shards the coverage is no less than 46.8%, 44.4% respectively, but most likely higher. Such value can be inferred by looking at the results obtained for each player.

```{r add-player_opponent, echo=FALSE}
Seasonal <- left_join(Seasonal,LoR.Deck[,.(deck_code,archetype)] %>% setnames(old = "archetype", new = "player_1")   ,by=c("deck_code_1"="deck_code"))
Seasonal <- left_join(Seasonal,LoR.Deck[,.(deck_code,archetype)] %>% setnames(old = "archetype", new = "opponent_1") ,by=c("deck_code_2"="deck_code"))

Seasonal$player_2     <- Seasonal$opponent_1
Seasonal$opponent_2   <- Seasonal$player_1

Seasonal$oppoppuid_1  <- Seasonal$puuid_2
Seasonal$oppoppuid_2  <- Seasonal$puuid_1
```

```{r melt-DT, echo=FALSE}
LoR.Account.Melt <- LoR.Account.RMD %>%
  mutate( RiotID = paste(gameName,tagLine) ) %>%
  melt(., id.vars = c("RiotID","master"), measure.vars=c("puuid_1","puuid_2","puuid_3"),value.name=c("puuid"),variable.name="origin" ) %>%
  mutate( origin = as.numeric(origin) ) %>%
  copy() 


LoR.Melt.Seasonal <- Seasonal %>% 
  filter( game_start_time_utc < as.POSIXct('2021-06-21 00:00:00', tz="UTC") ) %>%
  # mutate( time = as_date(game_start_time_utc) ) %>%
  select( match_key,server,game_start_time_utc,game_version,ends_with("_1"),ends_with("_2"),-ends_with("_3"),-ends_with("_4") ) %>%
  # colnames()
  melt(id.vars=c("match_key","server","game_start_time_utc","game_version","puuid_1","puuid_2"), measure.vars=patterns( 
    str_sub(
      names(select(Seasonal,ends_with("_1")))
      ,end = -3) 
  ),
  value.name = str_sub(
    names(select(Seasonal,ends_with("_1")))
    ,end = -3) 
  ) %>% left_join(. , LoR.Account.Melt[,.(puuid,RiotID)] %>% setnames(old = "RiotID", new = "userID")     ,by=c("puuid"="puuid")) %>%
  left_join(. , LoR.Account.Melt[,.(puuid,RiotID)] %>% setnames(old = "RiotID", new = "opponentID") ,by=c("oppoppuid"="puuid"))

LoR.Melt.Bracket <- Seasonal %>% 
  filter( game_start_time_utc > as.POSIXct('2021-06-21 00:00:00', tz="UTC") ) %>%
  # mutate( time = as_date(game_start_time_utc) ) %>%
  select( match_key,server,game_start_time_utc,game_version,ends_with("_1"),ends_with("_2"),-ends_with("_3"),-ends_with("_4") ) %>%
  # colnames()
  melt(id.vars=c("match_key","server","game_start_time_utc","game_version","puuid_1","puuid_2"), measure.vars=patterns( 
    str_sub(
      names(select(Seasonal,ends_with("_1")))
      ,end = -3) 
  ),
  value.name = str_sub(
    names(select(Seasonal,ends_with("_1")))
    ,end = -3) 
  ) %>% left_join(. , LoR.Account.Melt[,.(puuid,RiotID)] %>% setnames(old = "RiotID", new = "userID")     ,by=c("puuid"="puuid")) %>%
  left_join(. , LoR.Account.Melt[,.(puuid,RiotID)] %>% setnames(old = "RiotID", new = "opponentID") ,by=c("oppoppuid"="puuid"))

LoR.Melt.Seasonal <- left_join(LoR.Melt.Seasonal,LoR.Deck %>% select(!archetype),by="deck_code")

```

- Sample size: `r nGames`
- Last update at 2021-06-28 12:05

---

```{r create-lineUp-list, echo=FALSE, message=FALSE}
LineUp.DT <- left_join(LoR.Melt.Seasonal ,LoR.Account.Melt ,by=c("userID"="RiotID")) %>% 
  select(userID,server,player,deck_code) %>% 
  # distinct() %>% 
  group_by(userID,server) %>%
  summarise( listDeck=list(sort(unique(player))),listCode=list(unique(deck_code)) )
# LineUp.DT %>% rowwise() %>% unnest(listDeck) %>% group_by(userID) %>% count() %>% tabyl(n)
```

```{r create-LineUp-DT, echo=FALSE}
Seasonal.LineUp.DT <- 
cbind(setDT(LineUp.DT)[,.(userID,server)], 
      do.call(rbind, lapply(1:NROW(LineUp.DT), function(x) assignLineUp(LineUp.DT$listDeck[x]) ) ) #Seasonal.LineUp.DT 
      ) %>%
  mutate( LU := glue("{deck_1} - {deck_2} - {deck_3}" ) )

```

```{r create-Game-Result, echo=FALSE, message=FALSE}
Game.Result.EU <- LoR.Melt.Seasonal %>%
  # left_join( ., LineUp.DT )
  # mutate( time = as.Date(game_start_time_utc)) %>%
  # filter( time > "2021-06-15" ) %>%
  group_by(  userID,opponentID,server ) %>%
  mutate( timeBlock = min(game_start_time_utc) %>% as_datetime(., tz="UTC") ) %>%
  group_by(  userID,opponentID,server,timeBlock ) %>%
  arrange( timeBlock ) %>%
  summarise( result = paste(game_outcome,collapse = "," ), ldeck  = list(player) ) %>%
  # summarise( result = paste(game_outcome,collapse = "," ), decks  = paste(player,collapse = "," ) ) %>%
  arrange( userID, timeBlock ) %>%
  filter( server=="europe" ) %>%
  mutate( round = case_when(
    # 10:00 UTC = 11:55 + 5 CET -> UTC+2hrs = CET
    timeBlock > as.POSIXct('2021-06-19 10:00:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 11:05', tz="UTC") ~ 1, # 10:00 CET
    timeBlock > as.POSIXct('2021-06-19 11:05:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 12:10', tz="UTC") ~ 2, # 11:05 CET
    timeBlock > as.POSIXct('2021-06-19 12:10:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 13:15', tz="UTC") ~ 3, # 12:10 CET
    timeBlock > as.POSIXct('2021-06-19 13:15:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 14:20', tz="UTC") ~ 4, # 13:15 CET
    timeBlock > as.POSIXct('2021-06-19 14:20:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 15:50', tz="UTC") ~ 5, # 14:20 CET
    timeBlock > as.POSIXct('2021-06-19 15:50:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 16:55', tz="UTC") ~ 6, # 15:50 CET
    timeBlock > as.POSIXct('2021-06-19 16:55:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 18:00', tz="UTC") ~ 7, # 16:55 CET
    timeBlock > as.POSIXct('2021-06-19 18:00:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 19:05', tz="UTC") ~ 8, # 18:00 CET
    timeBlock > as.POSIXct('2021-06-19 19:05:00', tz="UTC") ~ 9, # 19:05 CET
    )
  ) %>%
  mutate( nWin = str_count(result,"win") ) %>%
  mutate( win = ifelse(nWin==2,1,0) ) %>%
  group_by(userID) %>%
  mutate( cumWin = cumsum(win)) %>%
  mutate( cumRound = cumsum(nWin)) %>%
  left_join(data.table( userID = rep( LineUp.DT %>% filter(server=="europe") %>% pull(userID),each=9),
                        round  = rep(seq(1,9,1), times = (LineUp.DT %>% filter(server=="europe") %>% NROW())  ) ), . , by = c("userID","round")) %>% 
  as.tbl() %>% 
  relocate(round, .after = server)



Game.Result.NA <- LoR.Melt.Seasonal %>%
  # mutate( time = as.Date(game_start_time_utc)) %>%
  # filter( time > "2021-06-15" ) %>%
  group_by(  userID,opponentID,server ) %>%
  mutate( timeBlock = min(game_start_time_utc) %>% as_datetime(., tz="UTC") ) %>%
  group_by(  userID,opponentID,server,timeBlock ) %>%
  arrange( timeBlock ) %>%
  # summarise( result = paste(game_outcome,collapse = "," ), decks  = list(player) ) %>%
  summarise( result = paste(game_outcome,collapse = "," ), ldeck  = list(player) ) %>%
  arrange( userID, timeBlock ) %>%
  filter( server=="americas" ) %>%
  mutate( round = case_when(
    # 10:00 UTC = 11:55 + 5 CET -> UTC+2hrs = CET
    timeBlock > as.POSIXct('2021-06-19 17:00:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 18:05', tz="UTC") ~ 1, # 10:00 CET
    timeBlock > as.POSIXct('2021-06-19 18:05:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 19:10', tz="UTC") ~ 2, # 11:05 CET
    timeBlock > as.POSIXct('2021-06-19 19:10:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 20:15', tz="UTC") ~ 3, # 12:10 CET
    timeBlock > as.POSIXct('2021-06-19 20:15:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 21:20', tz="UTC") ~ 4, # 13:15 CET
    timeBlock > as.POSIXct('2021-06-19 21:20:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 22:50', tz="UTC") ~ 5, # 14:20 CET
    timeBlock > as.POSIXct('2021-06-19 22:50:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 23:55', tz="UTC") ~ 6, # 15:50 CET
    timeBlock > as.POSIXct('2021-06-19 23:55:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 01:00', tz="UTC") ~ 7, # 16:55 CET
    timeBlock > as.POSIXct('2021-06-20 01:00:00', tz="UTC") & timeBlock <= as.POSIXct('2021-06-19 02:05', tz="UTC") ~ 8, # 18:00 CET
    timeBlock > as.POSIXct('2021-06-20 02:05:00', tz="UTC") ~ 9, # 19:05 CET
    )
  ) %>%
  mutate( nWin = str_count(result,"win") ) %>%
  mutate( win = ifelse(nWin==2,1,0) ) %>%
  group_by(userID) %>%
  mutate( cumWin   = cumsum(win)) %>%
  mutate( cumRound = cumsum(nWin)) %>%
  left_join(data.table( userID = rep( LineUp.DT %>% filter(server=="americas") %>% pull(userID) ,each=9),
                        round  = rep(seq(1,9,1), times = (LineUp.DT %>% filter(server=="americas") %>% NROW()) ) ), . , by = c("userID","round")) %>%
  as.tbl() %>% 
  relocate(round, .after = server)

###

Game.Result.EU <- (left_join(Game.Result.EU,LineUp.DT %>% select(!server),by="userID"))
Game.Result.EU$ban <- lapply( 1:NROW(Game.Result.EU), function(x) (setdiff( Game.Result.EU$listDeck[x] %>% unlist(),Game.Result.EU$ldeck[x] %>% unlist() )) %>% ifelse(length(.)==1,.,NA ) ) %>% unlist(use.names = F)

Game.Result.NA <- (left_join(Game.Result.NA,LineUp.DT %>% select(!server),by="userID"))
Game.Result.NA$ban <- lapply( 1:NROW(Game.Result.NA), function(x) (setdiff( Game.Result.NA$listDeck[x] %>% unlist(),Game.Result.NA$ldeck[x] %>% unlist() )) %>% ifelse(length(.)==1,.,NA ) ) %>% unlist(use.names = F)

# rbind(Game.Result.EU,Game.Result.NA) %>%
#   # filter( server %in% c("americas","europe") ) %>%
#   filter(is.na(server)) %>%
#   pull(round) %>% table()
#   group_by(userID) %>%
#   summarise( totalWin = sum(win) ) %>%
#   arrange(desc(totalWin)) %>%
#   filter( totalWin >= 7 )
# 
# rbind(Game.Result.EU,Game.Result.NA) %>%
#   filter( result %in% c("win,loss","loss,win" ) )
```

At the moment I'm writing, if I have the data of a match in almost all cases I have coverage of all games played.

There **`r rbind(Game.Result.EU,Game.Result.NA) %>% filter( result %in% c("win","loss" )) %>% count() %>% pull()` matches** whose I have only 1 games (16 in round 1 and 20 on round 9) and **`r rbind(Game.Result.EU,Game.Result.NA) %>% filter( result %in% c("win,loss","loss,win" )) %>% count() %>% pull()` matches** where I have 2 games but I know three games were played.

```{r plot-MissGames, fig.cap="Uncomplete Matches Distribution", fig.subcap="Absolute frequencies", echo=FALSE, message=FALSE}
rbind(Game.Result.EU,Game.Result.NA) %>%
  filter( result %in% c("win","loss" ) | result %in% c("win,loss","loss,win" ) ) %>%
  summarise( round.distr = table(round) ) %>% cbind(seq(1,9,1),.) %>% rename('Round'=1,'Count'=2) %>% 
  mutate( Round =  factor(Round) ) %>%
  ggplot(aes(Round,Count)) + 
  geom_bar(color="blue",stat = "identity", fill=rgb(0.1,0.4,0.5,0.7))
```

Regarding the players and their line ups, of 1024 players from each shard the data covers "at least 1 of the decks" for `r Seasonal.LineUp.DT[!is.na(deck_1) & server=="europe"  , .N]` / 1024 in EU and `r Seasonal.LineUp.DT[!is.na(deck_1) & server=="americas"  , .N]` for NA. On the other hand, the complete coverage for a player line up is `r Seasonal.LineUp.DT[!is.na(deck_3) & server=="europe", .N]`/1024 for EU and `r Seasonal.LineUp.DT[!is.na(deck_3) & server=="americas", .N]`/1024 for NA. All tops32 are included in this sample.

---

# **Line Ups**

Let's start with the easy stuff: by looking at the most played LineUps.

Sadly the tournament setting is showing the limitation of my approach to define archetypes by looking at champion + regions because during the open rounds, compared to the ladder, we can see an increase of "tech" cards in the form of champions like Jarvan IV in dragon decks.

```{r table-deck, echo=FALSE}
left_join(
Seasonal.LineUp.DT  %>%
  filter(server!="asia") %>%
  select(contains("deck")) %>%
  unlist(.,use.names = F) %>%
  tabyl(.,show_na = F) %>% 
  arrange(desc(n))  %>% 
  mutate(percent = 3*percent ) %>%
  adorn_pct_formatting(.,digits = 2) %>%
  rename( 'Deck'=1 ) %>%
  as_tibble(),
Seasonal.LineUp.DT  %>%
  filter(server!="asia") %>%
  filter(!is.na(deck_3)) %>%
  select(contains("deck")) %>%
  unlist(.,use.names = F) %>%
  tabyl(.,show_na = F) %>% 
  arrange(desc(n))  %>% 
  mutate(percent = 3*percent ) %>%
  adorn_pct_formatting(.,digits = 2) %>%
  rename( 'Deck'=1,"n \n (only full-LU)"="n","percent \n (only full-LU)"="percent" ) %>%
  as_tibble(),
by="Deck"
) %>%
  reactable(.,searchable = T,
              highlight = TRUE,
              defaultPageSize = 10,
              defaultColDef = colDef(
                # header = function(value) gsub(".", " ", value, fixed = TRUE),
                # cell = function(value) format(value, nsmall = 1),
                align = "center",
                footerStyle = list(fontWeight = "bold"),
                headerStyle = list(background = "#f7f7f8")
              ),
              columns = list(
                Deck = colDef(style = list(fontWeight = "bold")  ),
                n = colDef(footer = function(values) sprintf("%.0f", sum(values)))
              )
            )

# columns = list(
#  n = colDef(footer = function(values) sprintf(".%.2f", sum(values)))
# ),
# defaultColDef = colDef(footerStyle = list(fontWeight = "bold")
# defaultColDef = colDef(footerStyle = list(fontWeight = "bold")

```

But what about the complete lineUps? 

```{r table-LineUps, echo=FALSE, message=FALSE}

Seasonal.LineUp.DT  %>%
  filter(server!="asia") %>%
  filter( !is.na(deck_3) ) %>%
  pull(LU) %>%
  # group_by(LU) %>% summarise(N=n())
  tabyl(.,show_na = F) %>% 
  arrange(desc(n))  %>% 
  # adorn_pct_formatting() %>% 
  rename('LU'=1) %>%
  left_join(.,
            Seasonal.LineUp.DT %>%
            select(contains("deck"),LU) %>%
            filter(!is.na(deck_3)),
            by="LU"
            ) %>%
  distinct() %>%
  select(n,percent,deck_1,deck_2,deck_3,LU ) %>%
  reactable(. , searchable = TRUE,
                defaultPageSize = 10,
                highlight = TRUE,
            defaultColDef = colDef(
                align = "center",
                footerStyle = list(fontWeight = "bold"),
                headerStyle = list(background = "#f7f7f8"),
              ),
            columns = list(
              n = colDef(name="N", footer = function(values) sprintf("%.0f", sum(values))),
              percent = colDef(name="Percent", format = colFormat(percent = TRUE, digits = 2), footer = function(values) sprintf("%.2f", sum(values))  ),
              deck_1 = colDef(name = "Deck 1", style = list(fontWeight = 600, color = "red"  ) ),
              deck_2 = colDef(name = "Deck 2", style = list(fontWeight = 600, color = "green") ),
              deck_3 = colDef(name = "Deck 3", style = list(fontWeight = 600, color = "blue" ) )
              )
          )
```

The line ups made of:

- Aurelion Sol / Shyvana / Zoe 
- Draven / Ezreal 
- Nasus / Thresh

was the most popular choice.

---

## Pairing {.tabset .tabset-fade .tabset-pills}

Which deck is usually paired with in a lineUp ? Since the option are too many I had to group most of the champions combination into a single value (Other). Here I grouped all values after the 10th most used deck.

---

### Raw Pair

Pairing with full-Line-up data

```{r pair-table, echo=FALSE}
fct_n = 10
fct_values <- Seasonal.LineUp.DT[ !is.na(deck_3), ] %>%
  select( contains("deck") ) %>%
  unlist(.,use.names = F) %>%
  tabyl() %>% rename('deck'=1) %>% as.tbl() %>%
  mutate(topN = fct_lump(deck, n = fct_n, w = percent, ties.method = "max")) %>% pull(topN) %>% levels()

# off_rating_color <- make_color_pal(c("#ff2700", "#f8fcf8", "#44ab43"), bias = 1.3)
# BuYlRd <- function(x) rgb(colorRamp(c("#7fb7d7", "#ffffbf", "#fc8d59"))(x), maxColorValue = 255)

pairFreq <- rbind(
Seasonal.LineUp.DT %>%
  select(contains("deck")) %>%
  filter(!is.na(deck_3)) %>%
  # distinct() %>%
melt( id.vars=c("deck_1"), measure.vars=c("deck_2","deck_3"), value.name = c("paired") ) %>% rename("deck"=1),

Seasonal.LineUp.DT %>%
  select(contains("deck")) %>%
  filter(!is.na(deck_3)) %>%
  # distinct() %>%
melt( id.vars=c("deck_2"), measure.vars=c("deck_1","deck_3"), value.name = c("paired") ) %>% rename("deck"=1),

Seasonal.LineUp.DT %>%
  select(contains("deck")) %>%
  filter(!is.na(deck_3)) %>%
  # distinct() %>%
melt( id.vars=c("deck_3"), measure.vars=c("deck_1","deck_2"), value.name = c("paired") ) %>% rename("deck"=1)
) %>%
  select(deck,paired) %>%
  mutate_at(c("deck","paired") , ~fct_other(., keep=fct_values[fct_values!="Other"]) ) %>%
  tabyl(deck,paired)

# pairFreq <- pairFreq %>% as_tibble() %>% select(!deck)

# pairFreq %>%
#   count(deck, paired) %>%
#   group_by(deck) %>%          # now required with changes to dplyr::count()
#   mutate(prop = prop.table(n))

pairFreq %>%
  adorn_totals("row") %>%
  # tidyr::gather(gear, n, 2:ncol(.), convert = TRUE) %>%
  # kable(rbind(., sumrow[,-1]))
  kbl(., align="c") %>%
  kable_paper("hover", full_width = F)
  
```

### Distinct Pair

Pairing with distinct full-Line-up data

```{r pair-distinct, echo=FALSE}
fct_n = 10
fct_values <- Seasonal.LineUp.DT[ !is.na(deck_3), ] %>%
  select( contains("deck") ) %>%
  unlist(.,use.names = F) %>%
  tabyl() %>% rename('deck'=1) %>% as.tbl() %>%
  mutate(topN = fct_lump(deck, n = fct_n, w = percent, ties.method = "max")) %>% pull(topN) %>% levels()

# off_rating_color <- make_color_pal(c("#ff2700", "#f8fcf8", "#44ab43"), bias = 1.3)
# BuYlRd <- function(x) rgb(colorRamp(c("#7fb7d7", "#ffffbf", "#fc8d59"))(x), maxColorValue = 255)

pairFreq <- rbind(
Seasonal.LineUp.DT %>%
  select(contains("deck")) %>%
  filter(!is.na(deck_3)) %>%
  distinct() %>%
melt( id.vars=c("deck_1"), measure.vars=c("deck_2","deck_3"), value.name = c("paired") ) %>% rename("deck"=1),

Seasonal.LineUp.DT %>%
  select(contains("deck")) %>%
  filter(!is.na(deck_3)) %>%
  distinct() %>%
melt( id.vars=c("deck_2"), measure.vars=c("deck_1","deck_3"), value.name = c("paired") ) %>% rename("deck"=1),

Seasonal.LineUp.DT %>%
  select(contains("deck")) %>%
  filter(!is.na(deck_3)) %>%
  distinct() %>%
melt( id.vars=c("deck_3"), measure.vars=c("deck_1","deck_2"), value.name = c("paired") ) %>% rename("deck"=1)
) %>%
  select(deck,paired) %>%
  mutate_at(c("deck","paired") , ~fct_other(., keep=fct_values[fct_values!="Other"]) ) %>%
  tabyl(deck,paired)

# pairFreq <- pairFreq %>% as_tibble() %>% select(!deck)

# pairFreq %>%
#   count(deck, paired) %>%
#   group_by(deck) %>%          # now required with changes to dplyr::count()
#   mutate(prop = prop.table(n))

pairFreq %>%
  adorn_totals("row") %>%
  # tidyr::gather(gear, n, 2:ncol(.), convert = TRUE) %>%
  # kable(rbind(., sumrow[,-1]))
  kbl(., align="c") %>%
  kable_paper("hover", full_width = F)
  
```

---

## Top32 - Open Rounds

This is similar to the previous section but the question was: how conservative/original were the deck in the top32 compared to all participants? So the table will show how many "Other" (below the 5th most used deck) were included in a line-up. The results are from "at least 1 Other" deck to all 3 deck being from the Other category.

```{r top32-file, echo=FALSE}
top32.NA  <- c(
"Don MoeZera","StolenConch","FLY PowerOfEvil","Makantor",
"Jacowaco","DÃ¬or","Thelirious","FilthyGamerWeeb",
"TheBlackBossbr","MKnittel","XerathUnleashed","Jhin",
"4LW","Hillbilly Fred","qcxfnIoESpbv2iZ9","Henneky",
"Briguy","Dragonguywhodied","Damian1917","Octopuses",
"LGamesBrZ","cspickle","TomasZamo2000","STAN",
"lmag","Ez2Win","Big Ogre","Sucessor",
"NoTapper","MajiinBae","Sirturmund","XxWhatAmIxX"
)

top32.EU  <- c(
"FirstPinkBeaver","Vlahh","SeaWorms","Aseryous SouL",
"Alive on Arrival","Camilari","xTacio","AutoChessTomas",
"Pavelicii","Feanor CurufinwÃ«","greSKey","qpaÃ±zm",
"Meliador0","jageeegeeee","M8Asher","alleyCaesar",
"Trishfangirl69","ASOLid roamer","pokrovac","Sergi2Vamos",
"Szychu","L3W15 7","The CatAsUs","Worthos",
"Trickster Sorry","Kuvira","freshlobster LoR","Ultraman1996",
"FPG Raki","BokyDaGirica","SmoothSwoleoist","Ahuizotle"
)
#
# 
# top32.EU.reco <- c((Game.Result.EU %>%
#   filter(str_detect(userID,
#                   paste(top32.EU,collapse = '|'))) %>%
#   distinct(userID) %>% pull())
# ) %>% as.data.table() %>% rename("name"=".") %>%
#   mutate(name = str_replace(name, "\\s[^ ]+$", "")) %>% pull()
# 
# setdiff(top32.EU,top32.EU.reco)
# 
# ###
# 
# c((Game.Result.NA %>%
#   filter(str_detect(userID,
#                   paste(top32.NA,collapse = '|'))) %>%
#   distinct(userID) %>% pull())
# ) %>% as.data.table() %>% rename("name"=".") %>%
#   mutate(name = str_replace(name, "\\s[^ ]+$", "")) %>% pull()
# 
# setdiff(top32.NA,top32.NA.reco)
# 
# "Don MoeZera" #
# "FLY PowerOfEvil" # Cephalopod
# "TheBlackBossbr"  # TheBlackBoss
# "MKnittel"
# "Jhin"
# "Hillbilly Fred"
# "qcxfnIoESpbv2iZ9"
# "LGamesBrZ"
# 
# fwrite(
 # LoR.Melt.Seasonal %>%
 # filter( userID %in%
 #     c(
 #       (Game.Result.EU %>%
 #   filter(str_detect(userID, paste(top32.EU,collapse = '|'))) %>%
 #     distinct(userID) %>% pull()),
 #       (Game.Result.EU %>%
 #   filter(str_detect(userID, paste(c("SouL","TomasOW","Cosimo","Sorry","freshlobster","Boky") ,collapse = '|'))) %>%
 #     distinct(userID) %>% pull())
 #     )
 # ) %>%
 #   distinct( userID,player,deck_code ) %>%
 #   # select(userID,player,deck_code) %>% arrange(userID) ,
 #   select(userID,player,deck_code) %>% arrange(userID),
# "Fulltop32LineUp_xDeck.csv" )
# 
# 
# fwrite(
#   LoR.Melt.Seasonal %>%
#   filter( userID %in%
  #     c(
  #       (Game.Result.NA %>%
  # filter(str_detect(userID, paste(top32.NA,collapse = '|'))) %>%
  #   distinct(userID) %>% filter(userID != "Jhinitaliyah NA1") %>% pull() ),
  #     (Game.Result.NA %>%
  # filter(str_detect(userID, paste(c("Mr eMOEtional","Cephalopod","TheBlackBoss","Drak","Yangzera","Duckling","NoPlateAu","LGamesBr"),collapse = '|'))) %>%
  #   distinct(userID) %>% pull())
  #     )
#   ) %>%
#   distinct( userID,player,deck_code ) %>%
#   # select(userID,player,deck_code) %>% arrange(userID) ,
#   select(userID,player,deck_code) %>% arrange(userID),
# "Full_top32_NA_LineUp_xDeck.csv" )
 
 
# paste(
# str_replace(c(
#         (Game.Result.NA %>%
#   filter(str_detect(userID, paste(top32.NA,collapse = '|'))) %>%
#     distinct(userID) %>% filter(userID != "Jhinitaliyah NA1") %>% pull() ),
#       (Game.Result.NA %>%
#   filter(str_detect(userID, paste(c("Mr eMOEtional","Cephalopod","TheBlackBoss","Drak","Yangzera","Duckling","NoPlateAu","LGamesBr"),collapse = '|'))) %>%
#     distinct(userID) %>% pull())
#       )
# , "\\s[^ ]+$", ""),collapse = ",")



      
```

```{r compute-other-All, echo=FALSE}
fct_n = 5

fct_values <- Seasonal.LineUp.DT[ !is.na(deck_3), ] %>%
  select( contains("deck") ) %>%
  unlist(.,use.names = F) %>%
  tabyl() %>% rename('deck'=1) %>% as.tbl() %>%
  mutate(topN = fct_lump(deck, n = fct_n, w = percent, ties.method = "max")) %>% pull(topN) %>% levels()

LineUp.Rcd <- Seasonal.LineUp.DT %>%
  select( contains("deck") ) %>% 
  filter( !is.na(deck_3) ) %>%
  # filter( deck_1 %in% fct_values[-(fct_n+1)] | deck_2 %in% fct_values[-(fct_n+1)] | deck_3 %in% fct_values[-(fct_n+1)] ) %>%
  mutate_at(c("deck_1","deck_2","deck_3") , ~fct_other(., keep=fct_values[fct_values!="Other"]) )
  # filter( ((deck_1 == "Other" & deck_2 == "Other") | (deck_1 == "Other" & deck_3 == "Other") | (deck_2 == "Other" & deck_3 == "Other")  ))

# 1 deck Other
other1 <- LineUp.Rcd %>%
  filter( (deck_1 == "Other" | deck_2 == "Other" | deck_3 == "Other") )

# 2 deck Other
other2 <- LineUp.Rcd %>%
  filter( ((deck_1 == "Other" & deck_2 == "Other") | (deck_1 == "Other" & deck_3 == "Other") | (deck_2 == "Other" & deck_3 == "Other")  ))

# 3 deck Other
other3 <- LineUp.Rcd %>%
  filter( (deck_1 == "Other" & deck_2 == "Other" & deck_3 == "Other") )
```
Reminding that the top5 most played decks are:

- Azir / Irelia
- Draven / Ezreal
- Lissandra / Trundle (FR/SI)
- Nasus / Thresh
- Renekton / Sejuani / Sivir

```{r compute-top32-other, echo=FALSE}
Top32.EU_LU <- Seasonal.LineUp.DT[ userID %in%
c(
  (Game.Result.EU %>%
   filter(str_detect(userID, paste(top32.EU,collapse = '|'))) %>%
     distinct(userID) %>% pull()),
       (Game.Result.EU %>%
   filter(str_detect(userID, paste(c("SouL","TomasOW","Cosimo","Sorry","freshlobster","Boky") ,collapse = '|'))) %>%
     distinct(userID) %>% pull())
)] %>% 
  select( contains("deck") ) %>% 
  filter( !is.na(deck_3) ) %>%
  # filter( deck_1 %in% fct_values[-(fct_n+1)] | deck_2 %in% fct_values[-(fct_n+1)] | deck_3 %in% fct_values[-(fct_n+1)] ) %>%
  mutate_at(c("deck_1","deck_2","deck_3") , ~fct_other(., keep=fct_values[fct_values!="Other"]) )
  
# 1 deck Other
other1.EU <- Top32.EU_LU %>%
  filter( (deck_1 == "Other" | deck_2 == "Other" | deck_3 == "Other") )

# 2 deck Other
other2.EU <- Top32.EU_LU %>%
  filter( ((deck_1 == "Other" & deck_2 == "Other") | (deck_1 == "Other" & deck_3 == "Other") | (deck_2 == "Other" & deck_3 == "Other")  ))

# 3 deck Other
other3.EU <- Top32.EU_LU %>%
  filter( (deck_1 == "Other" & deck_2 == "Other" & deck_3 == "Other") )

# EU
# tribble(  
#   ~type, ~n,
#   "1 'Other' deck", other1.EU %>% NROW(),
#   "2 'Other' deck", other2.EU %>% NROW(),
#   "All 3 'Other'", other3.EU %>% NROW()
# ) %>%
#   mutate( freq = (n /32 ) %>% scales::percent(accuracy = 0.1)  ) %>%
#   rename( 'Type'=1,"N"=2,'Percent'=3 ) %>%
#   reactable()

Top32.NA_LU <- Seasonal.LineUp.DT[ userID %in%
c(
  (Game.Result.NA %>%
  filter(str_detect(userID, paste(top32.NA,collapse = '|'))) %>%
    distinct(userID) %>% filter(userID != "Jhinitaliyah NA1") %>% pull() ),
      (Game.Result.NA %>%
  filter(str_detect(userID, paste(c("Mr eMOEtional","Cephalopod","TheBlackBoss","Drak","Yangzera","Duckling","NoPlateAu","LGamesBr"),collapse = '|'))) %>%
    distinct(userID) %>% pull())
)] %>% 
  select( contains("deck") ) %>% 
  filter( !is.na(deck_3) ) %>%
  # filter( deck_1 %in% fct_values[-(fct_n+1)] | deck_2 %in% fct_values[-(fct_n+1)] | deck_3 %in% fct_values[-(fct_n+1)] ) %>%
  mutate_at(c("deck_1","deck_2","deck_3") , ~fct_other(., keep=fct_values[fct_values!="Other"]) )

# # 0 deck Other
# other0.NA <- Top32.NA_LU %>%
#   filter( (deck_1 != "Other" & deck_2 != "Other" & deck_3 != "Other") )

# 1 deck Other
other1.NA <- Top32.NA_LU %>%
  filter( (deck_1 == "Other" | deck_2 == "Other" | deck_3 == "Other") )

# 2 deck Other
other2.NA <- Top32.NA_LU %>%
  filter( ((deck_1 == "Other" & deck_2 == "Other") | (deck_1 == "Other" & deck_3 == "Other") | (deck_2 == "Other" & deck_3 == "Other")  ))

# 3 deck Other
other3.NA <- Top32.NA_LU %>%
  filter( (deck_1 == "Other" & deck_2 == "Other" & deck_3 == "Other") )

# NA
# tribble(  
#   ~type, ~n,
#   "1 'Other' deck", other1.NA %>% NROW(),
#   "2 'Other' deck", other2.NA %>% NROW(),
#   "All 3 'Other'", other3.NA %>% NROW()
# ) %>%
#   mutate( freq = (n /32 ) %>% scales::percent(accuracy = 0.1)  ) %>%
#   rename( 'Type'=1,"N"=2,'Percent'=3 ) %>%
#   reactable()
```

```{r table-top32-other, echo=FALSE}
# tabLU <-
rbind(
tribble(
  ~shard, ~type, ~n,
  glue( "All\n (", Seasonal.LineUp.DT[server!="asia" & !is.na(deck_3),.N],"/2024)"), "'Other' deck >= 1", other1 %>% NROW(),
  glue( "All\n (", Seasonal.LineUp.DT[server!="asia" & !is.na(deck_3),.N],"/2024)"), "'Other' deck >= 2", other2 %>% NROW(),
  glue( "All\n (", Seasonal.LineUp.DT[server!="asia" & !is.na(deck_3),.N],"/2024)"), "'Other' deck = 3",  other3 %>% NROW()
) %>%
  mutate( freq = (n / Seasonal.LineUp.DT[,.N]) %>% scales::percent(accuracy = 0.1)  ),
tribble(  
  ~shard,~type, ~n,
  glue( "EU\n (32/32)" ), "'Other' deck >= 1", other1.EU %>% NROW(),
  glue( "EU\n (32/32)" ), "'Other' deck >= 2", other2.EU %>% NROW(),
  glue( "EU\n (32/32)" ), "'Other' deck =  3", other3.EU %>% NROW()
) %>%
  mutate( freq = (n /32 ) %>% scales::percent(accuracy = 0.1)  ),
tribble(  
  ~shard,~type, ~n,
  glue("NA (32/32)"), "'Other' deck >= 1", other1.NA %>% NROW(),
  glue("NA (32/32)"), "'Other' deck >= 2", other2.NA %>% NROW(),
  glue("NA (32/32)"), "'Other' deck = 3", other3.NA %>% NROW()
) %>%
  mutate( freq = (n /32 ) %>% scales::percent(accuracy = 0.1)  )
) %>%
  rename_with(str_to_title) %>%
  # kable() %>%
  # pack_rows(index = "Shard")
  reactable(.,
            groupBy = "Shard",
            defaultExpanded = TRUE,
            defaultColDef = colDef(
                align = "center",
                footerStyle = list(fontWeight = "bold"),
                headerStyle = list(background = "#f7f7f8"),
              ),
            columns = list(
                Freq = colDef(style = list(fontWeight = "bold")  )
              ),
            )

# library("reactable")
# library("htmlwidgets")
# library("webshot2")
# 
# html_file <- "table.html"
# img_file <- "img.png"
# 
# saveWidget(widget = tabLU, file = html_file, selfcontained = TRUE)
# webshot(url = html_file, file = img_file, delay = 0.1, vwidth = 1245)
```

---

# **Bans**

We saw the line ups brought, but what was actually used? This is sadly not only tricky to compute but also impossible in some case where a player used only one of his/her deck.

What follows is a table containing the ban rates for each deck computeted in two different ways: 

- **Mean Ban Rate by Line Up**: mean value of the ban rate for each deck among all Line Ups that contains it.

> Example: 100 LineUps, 99 with Azir/Irelia with 100% ban rate and 1 with 0% ban rate -> Mean Ban Rate by Line Up = (100x99+0x1)/100 = 99%

- **Ban Rate**: ratio of number of ban of a deck among all bans acrooss line ups that contains such deck.

> Example: 100 LineUps, 99 with Azir/Irelia with 1 games and Azir / Irelia banned in each istance (100% ban rate) and 1 line up with 0 ban but 100 games (0% ban rate) -> Ban Rate = (1x99+0)/199 = ~49.7%


```{r table-ban, echo=FALSE, message=FALSE}
deckForBan <- Seasonal.LineUp.DT %>%
  filter(!is.na(deck_3) & server!="asia") %>%
  select(contains("deck")) %>%
  unlist(.,use.names = F) %>% unique() %>% sort()
              
########

ban.tbl.All <- Seasonal.LineUp.DT %>%
  filter(!is.na(deck_3) & server!="asia") %>%
  select(LU,contains("deck")) %>%
  melt(id.vars="LU") %>%
  arrange(LU) %>%
  select(!variable) %>%
  rename("ban"="value")

ban.tbl <- rbind(Game.Result.EU,Game.Result.NA) %>%
  filter(server!="asia") %>%
  left_join(.,Seasonal.LineUp.DT %>%
              filter(!is.na(deck_3)) %>%
              select(!server),by=c("userID") ) %>%
  group_by( LU ) %>%
  count(ban) %>%
  filter( !is.na(ban) ) %>%
  group_by(LU) %>%
  mutate( freqBan = n/sum(n) )

ban.DT <- data.table( deck = deckForBan,
                      n.ban = numeric(),
                      max.ban = numeric()
                      )

for (i in 1:length(deckForBan) ) {
  # cat(i, " ")
  whichLU <- Seasonal.LineUp.DT %>%
    filter(!is.na(deck_3) & server!="asia") %>%
    filter( deck_1 == deckForBan[i] | deck_2 == deckForBan[i] | deck_3 == deckForBan[i]  ) %>%
    pull(LU)
  
  ban.DT[i,n.ban := (ban.tbl %>%
    filter( LU %in% whichLU ) %>%
    filter( ban == deckForBan[i] ) %>%
    pull(n) %>% sum()) ]
    
  ban.DT[i,max.ban := ban.tbl %>%
    filter( LU %in% whichLU ) %>%
    pull(n) %>% sum() ]
}

ban.tbl <- left_join(ban.tbl.All,ban.tbl,by=c("LU","ban"))[is.na(n),c("n","freqBan"):=list(0,0)]
ban.tbl <- ban.tbl %>%
  group_by(ban) %>%
  summarise( meanBan_byLU = mean(freqBan) )

ban.DT[ , meanBan := n.ban/max.ban ]
ban.DT <- left_join(ban.DT,ban.tbl,by=c("deck"="ban"))
ban.DT[ is.na(meanBan_byLU), meanBan_byLU:=0 ]
```


```{r print-table-ban, echo=FALSE}
ban.DT %>%
  select(deck,n.ban,contains("meanBan")) %>%
  reactable(., searchable = TRUE,
               defaultPageSize = 10,
               highlight = TRUE,
            defaultColDef = colDef(
                align = "center",
                headerStyle = list(background = "#f7f7f8")
                # colFormat(percent = TRUE, digits = 2)
              ),
            columns = list(
                deck = colDef(name="Deck", align = "left" ),
                n.ban = colDef(name="#Bans" ),
                meanBan = colDef(name="Ban Rate", format = colFormat(percent = TRUE, digits = 2) ),
                meanBan_byLU = colDef(name="Mean Ban Rate by Line Up", format = colFormat(percent = TRUE, digits = 2) )
              )
            
            )
```

---

# **Deck Structure from Bracket Stage** {.tabset .tabset-fade .tabset-pills}

From the bracket stage of the Seasonal it was possible to see what looked like some exotic decks that appearead out of nowhere. In truth there was no dark-tecnology but in some cases players just used decks that were present in the data all along. So here I'll add the deck structure of the least played decks from the ladder that appeared in the last weekend of the Seasonal (2021-06-26/27).

Some cases like Nox-Burn are excluded.

Draven / Riven / Vi (what I call "Draven pile") is actually my favorite of the bunch. It's a deck I knew about from about 3 weeks but couldn't make it popular as it looked like a pile of cards at random and yet I have more success than with Garen/Sivir which is another ignored deck (but less on the Italian community, thanks Nukeduck)

```{r play-rate-patch, echo=FALSE}

LoR.Master.Matches.RMD <- LoR.Match.RMD %>%
  filter( game_type=="Ranked") %>%
  filter( game_version > '2_7' | str_detect(game_version, '2_10') )

LoR.Master.Matches.RMD <- left_join(LoR.Master.Matches.RMD,LoR.Deck[,.(deck_code,archetype)] %>% setnames(old = "archetype", new = "player_1")   ,by=c("deck_code_1"="deck_code"))
LoR.Master.Matches.RMD <- left_join(LoR.Master.Matches.RMD,LoR.Deck[,.(deck_code,archetype)] %>% setnames(old = "archetype", new = "opponent_1") ,by=c("deck_code_2"="deck_code"))
LoR.Master.Matches.RMD$player_2   <- LoR.Master.Matches.RMD$opponent_1
LoR.Master.Matches.RMD$opponent_2 <- LoR.Master.Matches.RMD$player_1

LoR.Old.Data <- LoR.Master.Matches.RMD %>% 
  select( match_key,server,game_start_time_utc,game_version,ends_with("_1"),ends_with("_2"),-ends_with("_3"),-ends_with("_4") ) %>%
  melt(id.vars=c("match_key","server","game_start_time_utc","game_version"), measure.vars=patterns( 
    str_sub(
      names(select(LoR.Master.Matches.RMD,ends_with("_1")))
      ,end = -3) 
  ),
  value.name = str_sub(
    names(select(LoR.Master.Matches.RMD,ends_with("_1")))
    ,end = -3) 
  ) %>%
  mutate( factions = str_replace_all( factions, c("faction_","_Name")  , "" ) )

ChampionCombo <- LoR.Old.Data[,.(player)] %>% copy()
CC.table <- ChampionCombo %>% as.vector() %>% tabyl(.,player) %>% setnames(c("player","n","freq"))

bracketDecks <- LoR.Melt.Bracket[, unique(player) ]

DarkTech <- CC.table %>%
  filter(player %in% bracketDecks) %>%
  arrange(n) %>% slice_head(n=12) %>% pull(player)

usedDarkTech <- DarkTech[-c(2,3,7,9)]

# LoR.Old.Data[ puuid %in% LoR.Account.Melt[ RiotID == "SouL Who Wanders 1337", puuid ] ]
# ChampionCombo <- LoR.Melt.Matches.RMD[,.(player)] %>% copy()
# 
# CC.table <- ChampionCombo %>% as.vector() %>% tabyl(.,player) %>% setnames(c("player","n","freq"))
```

## Sejuani / Tryndamere (FR/SI)

```{r Deck-structure-1, echo=FALSE}
# SubDeck_deck_code <- LoR.Melt.Matches.RMD %>% searchDecks(.,string = c("Ashe","LeBlanc")) %>% pull(deck_code)
SubDeck_deck_code <- LoR.Old.Data %>%
  filter( player=="Sejuani / Tryndamere (FR/SI)" ) %>%
  pull(deck_code)

SubDeck_row <- length(SubDeck_deck_code)
SubDeck_deck_structure <- getDeck_structure_tibble(SubDeck_deck_code)
SubDeck_deck_structure$Copies <- factor(SubDeck_deck_structure$Copies, levels = c(1,2,3))
```

```{r print-table-structure-SubDeck-1, echo=FALSE }

PrepareDT <- tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  rename(.,One=2,Two=3,Three=4) %>%
  # arrange(desc(Total),One,Two,Three) %>%
  mutate(., Play_Rate = as.numeric(str_extract_all(Total,  "(?<=\\().+?(?=\\))"))/SubDeck_row)

brks <- c(0.499999999,seq(0.50,1,0.01))
clrs = colorRampPalette( c("white","#629F62") )(length(brks)+1)

tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  select(1:4) %>%
  cbind(.,PrepareDT$Play_Rate) %>%
  rename(.,"One"=2,"Two"=3,"Three"=4,"Play_Rate"=5) %>%
  arrange(desc(Play_Rate),"Three","Two","One") %>%
  relocate(.,1,5,4,3,2) %>%
  datatable(.,
          colnames = c("Card","Plat Rate","3","2","1"),
          options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            # dom = 't',
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )
          )) %>%
  formatStyle(c("Play_Rate","Three","Two","One"), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(c("Play_Rate","Three","Two","One"), 1) %>%
  formatStyle(1, fontWeight = 'bold', fontSize = "10pt") %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "10pt")

```
## Diana / Draven

```{r Deck-structure-2, echo=FALSE}
# SubDeck_deck_code <- LoR.Melt.Matches.RMD %>% searchDecks(.,string = c("Ashe","LeBlanc")) %>% pull(deck_code)
SubDeck_deck_code <- LoR.Old.Data %>%
  filter( player=="Diana / Draven" ) %>%
  pull(deck_code)

SubDeck_row <- length(SubDeck_deck_code)
SubDeck_deck_structure <- getDeck_structure_tibble(SubDeck_deck_code)
SubDeck_deck_structure$Copies <- factor(SubDeck_deck_structure$Copies, levels = c(1,2,3))
```

```{r print-table-structure-SubDeck-2, echo=FALSE }

PrepareDT <- tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  rename(.,One=2,Two=3,Three=4) %>%
  # arrange(desc(Total),One,Two,Three) %>%
  mutate(., Play_Rate = as.numeric(str_extract_all(Total,  "(?<=\\().+?(?=\\))"))/SubDeck_row)

brks <- c(0.499999999,seq(0.50,1,0.01))
clrs = colorRampPalette( c("white","#629F62") )(length(brks)+1)

tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  select(1:4) %>%
  cbind(.,PrepareDT$Play_Rate) %>%
  rename(.,"One"=2,"Two"=3,"Three"=4,"Play_Rate"=5) %>%
  arrange(desc(Play_Rate),"Three","Two","One") %>%
  relocate(.,1,5,4,3,2) %>%
  datatable(.,
          colnames = c("Card","Plat Rate","3","2","1"),
          options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            # dom = 't',
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )
          )) %>%
  formatStyle(c("Play_Rate","Three","Two","One"), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(c("Play_Rate","Three","Two","One"), 1) %>%
  formatStyle(1, fontWeight = 'bold', fontSize = "10pt") %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "10pt")

```

## Aphelios / Karma / Zoe

```{r Deck-structure-3, echo=FALSE}
# SubDeck_deck_code <- LoR.Melt.Matches.RMD %>% searchDecks(.,string = c("Ashe","LeBlanc")) %>% pull(deck_code)
SubDeck_deck_code <- LoR.Old.Data %>%
  filter( player=="Aphelios / Karma / Zoe" ) %>%
  pull(deck_code)

SubDeck_row <- length(SubDeck_deck_code)
SubDeck_deck_structure <- getDeck_structure_tibble(SubDeck_deck_code)
SubDeck_deck_structure$Copies <- factor(SubDeck_deck_structure$Copies, levels = c(1,2,3))
```

```{r print-table-structure-SubDeck-3, echo=FALSE }

PrepareDT <- tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  rename(.,One=2,Two=3,Three=4) %>%
  # arrange(desc(Total),One,Two,Three) %>%
  mutate(., Play_Rate = as.numeric(str_extract_all(Total,  "(?<=\\().+?(?=\\))"))/SubDeck_row)

brks <- c(0.499999999,seq(0.50,1,0.01))
clrs = colorRampPalette( c("white","#629F62") )(length(brks)+1)

tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  select(1:4) %>%
  cbind(.,PrepareDT$Play_Rate) %>%
  rename(.,"One"=2,"Two"=3,"Three"=4,"Play_Rate"=5) %>%
  arrange(desc(Play_Rate),"Three","Two","One") %>%
  relocate(.,1,5,4,3,2) %>%
  datatable(.,
          colnames = c("Card","Plat Rate","3","2","1"),
          options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            # dom = 't',
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )
          )) %>%
  formatStyle(c("Play_Rate","Three","Two","One"), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(c("Play_Rate","Three","Two","One"), 1) %>%
  formatStyle(1, fontWeight = 'bold', fontSize = "10pt") %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "10pt")

```

## Garen / Sivir

```{r Deck-structure-4, echo=FALSE}
# SubDeck_deck_code <- LoR.Melt.Matches.RMD %>% searchDecks(.,string = c("Ashe","LeBlanc")) %>% pull(deck_code)
SubDeck_deck_code <- LoR.Old.Data %>%
  filter( player=="Garen / Sivir" ) %>%
  pull(deck_code)

SubDeck_row <- length(SubDeck_deck_code)
SubDeck_deck_structure <- getDeck_structure_tibble(SubDeck_deck_code)
SubDeck_deck_structure$Copies <- factor(SubDeck_deck_structure$Copies, levels = c(1,2,3))
```

```{r print-table-structure-SubDeck-4, echo=FALSE }

PrepareDT <- tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  rename(.,One=2,Two=3,Three=4) %>%
  # arrange(desc(Total),One,Two,Three) %>%
  mutate(., Play_Rate = as.numeric(str_extract_all(Total,  "(?<=\\().+?(?=\\))"))/SubDeck_row)

brks <- c(0.499999999,seq(0.50,1,0.01))
clrs = colorRampPalette( c("white","#629F62") )(length(brks)+1)

tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  select(1:4) %>%
  cbind(.,PrepareDT$Play_Rate) %>%
  rename(.,"One"=2,"Two"=3,"Three"=4,"Play_Rate"=5) %>%
  arrange(desc(Play_Rate),"Three","Two","One") %>%
  relocate(.,1,5,4,3,2) %>%
  datatable(.,
          colnames = c("Card","Plat Rate","3","2","1"),
          options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            # dom = 't',
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )
          )) %>%
  formatStyle(c("Play_Rate","Three","Two","One"), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(c("Play_Rate","Three","Two","One"), 1) %>%
  formatStyle(1, fontWeight = 'bold', fontSize = "10pt") %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "10pt")

```

## Aurelion Sol / Vi / Zoe

```{r Deck-structure-5, echo=FALSE}
# SubDeck_deck_code <- LoR.Melt.Matches.RMD %>% searchDecks(.,string = c("Ashe","LeBlanc")) %>% pull(deck_code)
SubDeck_deck_code <- LoR.Old.Data %>%
  filter( player=="Aurelion Sol / Vi / Zoe" ) %>%
  pull(deck_code)

SubDeck_row <- length(SubDeck_deck_code)
SubDeck_deck_structure <- getDeck_structure_tibble(SubDeck_deck_code)
SubDeck_deck_structure$Copies <- factor(SubDeck_deck_structure$Copies, levels = c(1,2,3))
```

```{r print-table-structure-SubDeck-5, echo=FALSE }

PrepareDT <- tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  rename(.,One=2,Two=3,Three=4) %>%
  # arrange(desc(Total),One,Two,Three) %>%
  mutate(., Play_Rate = as.numeric(str_extract_all(Total,  "(?<=\\().+?(?=\\))"))/SubDeck_row)

brks <- c(0.499999999,seq(0.50,1,0.01))
clrs = colorRampPalette( c("white","#629F62") )(length(brks)+1)

tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  select(1:4) %>%
  cbind(.,PrepareDT$Play_Rate) %>%
  rename(.,"One"=2,"Two"=3,"Three"=4,"Play_Rate"=5) %>%
  arrange(desc(Play_Rate),"Three","Two","One") %>%
  relocate(.,1,5,4,3,2) %>%
  datatable(.,
          colnames = c("Card","Plat Rate","3","2","1"),
          options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            # dom = 't',
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )
          )) %>%
  formatStyle(c("Play_Rate","Three","Two","One"), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(c("Play_Rate","Three","Two","One"), 1) %>%
  formatStyle(1, fontWeight = 'bold', fontSize = "10pt") %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "10pt")

```

## Renekton / Sivir (FR/SH)

```{r Deck-structure-6, echo=FALSE}
# SubDeck_deck_code <- LoR.Melt.Matches.RMD %>% searchDecks(.,string = c("Ashe","LeBlanc")) %>% pull(deck_code)
SubDeck_deck_code <- LoR.Old.Data %>%
  filter( player=="Renekton / Sivir (FR/SH)" ) %>%
  pull(deck_code)

SubDeck_row <- length(SubDeck_deck_code)
SubDeck_deck_structure <- getDeck_structure_tibble(SubDeck_deck_code)
SubDeck_deck_structure$Copies <- factor(SubDeck_deck_structure$Copies, levels = c(1,2,3))
```

```{r print-table-structure-SubDeck-6, echo=FALSE }

PrepareDT <- tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  rename(.,One=2,Two=3,Three=4) %>%
  # arrange(desc(Total),One,Two,Three) %>%
  mutate(., Play_Rate = as.numeric(str_extract_all(Total,  "(?<=\\().+?(?=\\))"))/SubDeck_row)

brks <- c(0.499999999,seq(0.50,1,0.01))
clrs = colorRampPalette( c("white","#629F62") )(length(brks)+1)

tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  select(1:4) %>%
  cbind(.,PrepareDT$Play_Rate) %>%
  rename(.,"One"=2,"Two"=3,"Three"=4,"Play_Rate"=5) %>%
  arrange(desc(Play_Rate),"Three","Two","One") %>%
  relocate(.,1,5,4,3,2) %>%
  datatable(.,
          colnames = c("Card","Plat Rate","3","2","1"),
          options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            # dom = 't',
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )
          )) %>%
  formatStyle(c("Play_Rate","Three","Two","One"), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(c("Play_Rate","Three","Two","One"), 1) %>%
  formatStyle(1, fontWeight = 'bold', fontSize = "10pt") %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "10pt")

```

## Draven / Riven / Vi

```{r Deck-structure-7, echo=FALSE}
# SubDeck_deck_code <- LoR.Melt.Matches.RMD %>% searchDecks(.,string = c("Ashe","LeBlanc")) %>% pull(deck_code)
SubDeck_deck_code <- LoR.Old.Data %>%
  filter( player=="Draven / Riven / Vi" ) %>%
  pull(deck_code)

SubDeck_row <- length(SubDeck_deck_code)
SubDeck_deck_structure <- getDeck_structure_tibble(SubDeck_deck_code)
SubDeck_deck_structure$Copies <- factor(SubDeck_deck_structure$Copies, levels = c(1,2,3))
```

```{r print-table-structure-SubDeck-7, echo=FALSE }

PrepareDT <- tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  rename(.,One=2,Two=3,Three=4) %>%
  # arrange(desc(Total),One,Two,Three) %>%
  mutate(., Play_Rate = as.numeric(str_extract_all(Total,  "(?<=\\().+?(?=\\))"))/SubDeck_row)

brks <- c(0.499999999,seq(0.50,1,0.01))
clrs = colorRampPalette( c("white","#629F62") )(length(brks)+1)

tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  select(1:4) %>%
  cbind(.,PrepareDT$Play_Rate) %>%
  rename(.,"One"=2,"Two"=3,"Three"=4,"Play_Rate"=5) %>%
  arrange(desc(Play_Rate),"Three","Two","One") %>%
  relocate(.,1,5,4,3,2) %>%
  datatable(.,
          colnames = c("Card","Plat Rate","3","2","1"),
          options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            # dom = 't',
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )
          )) %>%
  formatStyle(c("Play_Rate","Three","Two","One"), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(c("Play_Rate","Three","Two","One"), 1) %>%
  formatStyle(1, fontWeight = 'bold', fontSize = "10pt") %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "10pt")

```

```{r search-weak-point, include=FALSE}
# possDecks <- Seasonal.LineUp.DT %>% select(contains("deck")) %>% unlist(.,use.names = F) %>% tabyl(.,show_na = F) %>% arrange(desc(n))  %>% as_tibble() %>% filter(n>5) %>% pull(1)
# MUtbl[ player %in% c("Lissandra / Trundle (FR/SI)","Vi / Zoe","Aurelion Sol / Thresh") & opponent %in% possDecks & muWR < 0.5 & muGames > 20, opponent ]
# possDecks <- MUtbl[ player %in% c("Lissandra / Trundle (FR/SI)","Vi / Zoe","Aurelion Sol / Thresh") & muWR < 0.40 & muGames > 50, opponent ]
# 
# # deep+azir+overwhelm
# 
# possDecks <- Reduce(vintersect, list(
# MUtbl[ player %in% c("Vi / Zoe")                    & muWR < 0.45 & okCI==T , opponent  ],
# MUtbl[ player %in% c("Aurelion Sol / Thresh")       & muWR < 0.45 & okCI==T , opponent  ],
# MUtbl[ player %in% c("Lissandra / Trundle (FR/SI)") & muWR < 0.45 & okCI==T , opponent  ]
# ))
# 
# rbind(
# MUtbl[ player %in% c("Vi / Zoe")                    & muWR < 0.45 & okCI==T   ],
# MUtbl[ player %in% c("Aurelion Sol / Thresh")       & muWR < 0.45 & okCI==T   ],
# MUtbl[ player %in% c("Lissandra / Trundle (FR/SI)") & muWR < 0.45 & okCI==T   ]
# ) %>%
#   # filter( opponent %in% c("Azir / Irelia","Lissandra / Taliyah") )
#   filter( opponent %in% c("Draven / Ezreal","Maokai / Nautilus") )
# 
# Seasonal.LineUp.DT[,tabyl(LU,show_na = F)] %>% arrange(desc(n))  %>% as_tibble() %>% setnames(.,new = c("deck","n","percent")) %>% 
#   filter( deck %in% Seasonal.LineUp.DT[ deck_1 %in% possDecks & deck_2 %in% possDecks & deck_3 %in% possDecks, unique(LU) ]  )
# 
# 
# Seasonal.LineUp.DT %>%
#   filter(str_detect(LU, paste(possDecks,collapse = '&')))
# 
# possDecks
# 
# (Seasonal.LineUp.DT %>%
#   filter(str_detect(LU, "Azir / Irelia" )) %>%
#   filter(str_detect(LU, "Lissandra / Taliyah" )))[,tabyl(LU)]
  
```