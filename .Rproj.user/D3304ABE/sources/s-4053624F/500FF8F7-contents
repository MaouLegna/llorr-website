---
title: |
  <center>![](https://dd.b.pvp.net/latest/set1/en_us/img/cards/01IO009T2-full.png){width=1024px}</center>
  THE META REPORT NAME IS TOO LONG, TOO DAMN LONG (nÂ°15)
author: "by Legna"
# subtitle: "`r knitr::current_input(dir = TRUE)`"
date: "2021/07/14"
output: 
  html_document:
    toc: true # table of content true
    toc_float:
      collapsed: false
    toc_depth: 3  # upto three depths of headings (specified by #, ## and ###)
    number_sections: true  ## if you want number sections at each table header
    fig_width: 9
    df_print: kable
    # theme: united  # many options for theme, this one is my favorite.
    # highlight: tango  # specifies the syntax highlighting style
---

```{css, echo=FALSE}
    body .main-container {
      max-width: 1800px !important;
      # width: 1800px !important;
      margin-left: auto;
      margin-right: auto;
    }
    body {
      # max-width: 1920px !important;
      background-color: whitesmoke;
    }
```

```{r knitr-opts, echo=FALSE}
knitr::opts_chunk$set(echo = FALSE,
                      comment = NA,
                      warning = FALSE,
                      error = FALSE,
                      message = FALSE,
                      tidy = TRUE)

knitr::opts_knit$set(root.dir = file.path("C:","LlorR"))
xaringanExtra::use_panelset()
```

```{r setup, include=FALSE}
options(width = 1000)
# here::here()
# here::i_am("/report_sources/Meta_Report_014_20210707.Rmd")

path.main <- file.path("C:","LlorR")
# file.path(path.DT, paste("LoR_main", ".R", sep=""))
# source(file.path("...","report_sources", paste("LoR_main", ".R", sep="")))
# source(here::here("scripts","lor_main.R" ))

source(file.path(path.main,"scripts","lor_main.R" ))

use_python("C:/anaconda/")
py_run_string("print('Hello World')")
lor_deckcodes <- import("lor_deckcodes")
py_module_available("lor_deckcodes")

options("digits.secs"=6)

# library("Hmisc")
# hidingTOC(
#   buttonLabel = "Contents",
#   levels = 3,
#   tocSide = c("left"),
#   buttonSide = c("left"),
#   posCollapse = c("margin"),
#   hidden = FALSE
# )
```

# Data {.unnumbered}

```{r raw-data}
# file.Match.DT   <- list.files(path = path.DT, pattern = "LoR_MatchDT_") %>% max()
# LoR.Match.RMD   <- fread(file.path(path.DT, file.Match.DT), header=T, na.strings = c("",NA))
# LoR.Deck        <- fread(paste0(path.DT,"LoR_DECK.csv"), na.strings = c("",NA))


#' Read gamesDT
#'#############
file.DT <- list.files(path = file.path(path.main,"data","raw"),
                     pattern = "LoR_MatchDT_",full.names = T) %>% max()

header <- fread(file.DT, header = FALSE, na.strings = c("",NA), nrows = 1, stringsAsFactors = FALSE)
LoR.Match.RMD   <- fread(file.DT, header = FALSE, na.strings = c("",NA), skip = (1888267)) # Min for Patch 2.11
colnames( LoR.Match.RMD ) <- unlist(header)
#' Read gamesDT
#'#############
# file.Top32 <- list.files(path = file.path(path.main,"data","raw"),
#                       pattern = "LoR_Top32_",full.names = T) %>% max()
# LoR.Top32.DT <- fread(file.Top32, header = T, na.strings = c("", NA))
#' Read Accounts
#'##############
file.Account <- list.files(path = file.path(path.main,"data","raw"),
                             pattern = "LoR_ACCOUNT_",full.names = T) %>% max()
LoR.Account.Melt <- fread(file.Account, header=T, na.strings = c("",NA), encoding = 'UTF-8') %>%
  mutate( RiotID = paste(gameName,tagLine) ) %>%
  # melt(., id.vars = c("RiotID","master"), measure.vars=c(contains("puuid")),value.name=c("puuid"),variable.name="origin" ) %>%
  melt(., id.vars = c("RiotID","master","activeShard"), measure.vars=c("puuid_1","puuid_2","puuid_3","puuid_4"),value.name=c("puuid"),variable.name="origin" ) %>%
  mutate( origin = as.numeric(origin) )

#' Read Decks
#'###########
LoR.Deck <- fread(input = file.path(path.main,"data","raw","LoR_DECK.csv"), header = T, na.strings = c("", NA))
```

```{r account-info  }
masterEU   <- NROW(LoR.Account.Melt[activeShard=="europe"   & master=="master"])/4
masterNA   <- NROW(LoR.Account.Melt[activeShard=="americas" & master=="master"])/4
masterASIA <- NROW(LoR.Account.Melt[activeShard=="asia"     & master=="master"])/4

# namesList.EU.RMD     <- fread(file.path(path.DT,"data","raw","LoR_LADDER_EU.csv"))$name
# namesList.NA.RMD     <- fread(file.path(path.DT,"data","raw","LoR_LADDER_NA.csv"))$name
# namesList.ASIA.RMD   <- fread(file.path(path.DT,"data","raw","LoR_LADDER_ASIA.csv"))$name

namesList.EU.RMD     <- fread(file.path(path.main,"data","raw","LoR_LADDER_EU.csv"))$name
namesList.NA.RMD     <- fread(file.path(path.main,"data","raw","LoR_LADDER_NA.csv"))$name
namesList.ASIA.RMD   <- fread(file.path(path.main,"data","raw","LoR_LADDER_ASIA.csv"))$name
```

```{r filter-prepare-games}
LoR.Master.Matches.RMD <- LoR.Match.RMD %>%
  filter( game_type=="Ranked" ) %>%
  filter( str_detect(game_version, '2_11') ) %>%
  mutate( game_start_time_cest = force_tz(game_start_time_utc, "CEST") ) %>%
  filter( game_start_time_cest > as.POSIXct("2021-07-07 19:00:00", tz = "CEST") & game_start_time_cest < as.POSIXct("2021-07-14 19:00:00", tz = "CEST") )

LoR.Master.Matches.RMD <- left_join(LoR.Master.Matches.RMD,LoR.Deck[,.(deck_code,archetype)] %>% setnames(old = "archetype", new = "player_1")   ,by=c("deck_code_1"="deck_code"))
LoR.Master.Matches.RMD <- left_join(LoR.Master.Matches.RMD,LoR.Deck[,.(deck_code,archetype)] %>% setnames(old = "archetype", new = "opponent_1") ,by=c("deck_code_2"="deck_code"))
LoR.Master.Matches.RMD$player_2   <- LoR.Master.Matches.RMD$opponent_1
LoR.Master.Matches.RMD$opponent_2 <- LoR.Master.Matches.RMD$player_1
```

```{r melt-matches}
LoR.Melt.Matches.RMD <- LoR.Master.Matches.RMD %>% 
  select( match_key,server,game_start_time_utc,game_version,ends_with("_1"),ends_with("_2"),-ends_with("_3"),-ends_with("_4") ) %>%
  melt(id.vars=c("match_key","server","game_start_time_utc","game_version"), measure.vars=patterns( 
    str_sub(
      names(select(LoR.Master.Matches.RMD,ends_with("_1")))
      ,end = -3) 
  ),
  value.name = str_sub(
    names(select(LoR.Master.Matches.RMD,ends_with("_1")))
    ,end = -3) 
  )

LoR.Melt.Matches.RMD <- left_join(LoR.Melt.Matches.RMD,LoR.Deck %>% select(!archetype),by=("deck_code"))

# LoR.Old.Data <- LoR.Melt.Matches.RMD %>%
#    filter( game_version > 'live_2_7' )
```

```{r}
# Filter games for Ranked / Current Patch
# LoR.Melt.Matches.RMD <- LoR.Match.RMD %>%
#   filter( game_type=="Ranked" ) %>%
#   filter( str_detect(game_version, '2_11') ) %>%
#   mutate( game_start_time_cest = force_tz(game_start_time_utc, "CEST") ) %>%
#   filter( game_start_time_utc > as.POSIXct('2021-07-07 19:00:00', tz="UTC") & game_start_time_utc < as.POSIXct('2021-07-14 19:00:00', tz="UTC") ) %>%
#   
#   #' Add archetypes for both players
#   #'################################
#   left_join(.,LoR.Deck[,.(deck_code,archetype)] %>% setnames(old = "archetype", new = "player_1")   ,by=c("deck_code_1"="deck_code")) %>%
#   left_join(.,LoR.Deck[,.(deck_code,archetype)] %>% setnames(old = "archetype", new = "opponent_1") ,by=c("deck_code_2"="deck_code")) %>%
#   mutate( player_2 = opponent_1, opponent_2 = player_1, oppopuuid_1 = puuid_2, oppopuuid_2 = puuid_1) %>%
#   
#   #' Melt
#   select( match_key,server,game_start_time_utc,game_version,ends_with("_1"),ends_with("_2"),-ends_with("_3"),-ends_with("_4") ) %>%
#   melt(id.vars=c("match_key","server","game_start_time_utc","game_version"), measure.vars=patterns( 
#     str_sub(
#       c(names(select(LoR.Match.RMD,ends_with("_1"))),"player_1","opponent_1","oppopuuid_1")
#       ,end = -3) 
#   ),
#   value.name = str_sub(
#     c(names(select(LoR.Match.RMD,ends_with("_1"))),"player_1","opponent_1","oppopuuid_1")
#     ,end = -3) 
#   ) %>%
#   mutate( factions = str_replace_all( factions, c("faction_","_Name")  , "" ) ) %>%
#   left_join(. , LoR.Account.Melt[,.(puuid,RiotID)] %>% setnames(old = "RiotID", new = "userID")     ,by=c("puuid"="puuid")) %>%
#   left_join(. , LoR.Account.Melt[,.(puuid,RiotID)] %>% setnames(old = "RiotID", new = "opponentID") ,by=c("oppopuuid"="puuid")) %>%
#   left_join(. , LoR.Deck %>% select(!archetype),by="deck_code")
```


```{r nGames-data}
live_patch_minrow   <- LoR.Match.RMD[,str_detect(game_version, '2_11') ] %>% which() %>% min()
nGames_live         <- slice(LoR.Match.RMD, live_patch_minrow:n()) %>% pull(status) %>% table(., useNA = "ifany") # [1]=200, [2]=404, [3]=503
names(nGames_live)  <- names(nGames_live)

nGames <- NROW(LoR.Melt.Matches.RMD)/2
# Matches404 <- round(LoR.Match.RMD[status=="404", .N] / LoR.Match.RMD[status %in% c("200","404"), .N],3)
```

Sample population: Ranked games / Patch 2.11 / Master players [^1]

Number of games: `r nGames %>% format(.,scientific = F)` [^2] (check the footnote for additional information)

[^1]: - EU Master players in the ladder: `r NROW(namesList.EU.RMD)` while the number of Master players I recovered from matches is: `r masterEU` so missing: `r NROW(namesList.EU.RMD)-masterEU` 
- NA Master players in the ladder: `r NROW(namesList.NA.RMD)` while the number of Master players I recovered from matches is: `r masterNA` so missing: `r NROW(namesList.NA.RMD)-masterNA` 
- ASIA Master players in the ladder: `r NROW(namesList.ASIA.RMD)` while the number of Master players I recovered from matches is: `r masterASIA` so missing: `r NROW(namesList.ASIA.RMD)-masterASIA`

[^2]: - Games from 2021-07-07 19:00:00 CEST up to 2021-07-14 19:00:00 CEST timezone 
- Max datetime of a match: `r LoR.Master.Matches.RMD[,max(game_start_time_utc)] %>% as_datetime() %>% format(.,"%Y-%m-%d %H:%M", tz = "UTC")` 
- Match Id recovered in patch 2.11: `r sum(nGames_live)` 
- Match metadata recovered in patch 2.11: `r nGames_live[which(names(nGames_live)=="200")]` 
- Match not collectable since friednly matches: `r (unname(nGames_live[which(names(nGames_live)=="404")])/sum(nGames_live)) %>% scales::percent(.,accuracy = 0.1)`
- Match metadata still to collect from 2.11: `r nGames_live[which(is.na(names(nGames_live)))]` 
- Last update: `r format(Sys.time(),"%Y-%m-%d %H:%M", tz = "UTC")` (UTC) 
- possible games missing because of data collection not running for a few hours a few days ago.

---

# Regions

---

## Play Rate {.tabset .tabset-fade .tabset-pills}

```{r process-tableFreq}
Region.Subset <- LoR.Melt.Matches.RMD %>%
  select( starts_with( "Region" ) ) %>%
  select( ends_with(".01"),ends_with(".02")) %>%
  copy()

if (anyNA(Region.Subset$Region.01)) {
  print("ATTENTION IDIOT!")
}

Region.Freq <- unlist(Region.Subset, use.names = F) %>% tabyl(.,show_na=F)
Region.Freq <- Region.Freq %>% mutate(.,percent=round(percent,4)) %>% setnames(.,c("region","n","freq"))
Region.Freq$region <- fct_recode(Region.Freq$region,!!!recodeRegLevels)

Region.Freq <- Region.Freq %>% tibble() %>% add_column(., icon = list.levels$iconRegion)

Region.Freq.Server <-  LoR.Melt.Matches.RMD %>%
  select( starts_with( "Region" ), server ) %>%
  select( ends_with(".01"),ends_with(".02"), server  ) %>%
  melt(id.var=c("server")) %>%
  select(value,server) %>%
  tabyl(value,server, show_na = F) %>%
  adorn_percentages("col") %>%
  # adorn_pct_formatting(digits = 2) %>%
  select(c(2,3,4))
```

### Plot

```{r plot-Region}

# sxLabel <- row.names(Region.Freq)
# sxLabel[with(Region.Freq, freq > 0.03)] <- ""

Region.Freq$text <- format(Region.Freq$freq*100,2)

sxLabel <- format(Region.Freq$freq*100,2)
dxLabel <- format(Region.Freq$freq*100,2)
sxLabel <- ifelse(as.numeric(sxLabel) > 3,  sxLabel , "")
dxLabel <- ifelse(as.numeric(dxLabel) <= 3, dxLabel , "")

RegionByRegion <- Region.Freq %>%
  ggplot(aes(x = reorder(region, freq), y = freq)) +
  geom_bar_pattern(
    aes(
      pattern_filename = region,
    ),
    stat            = 'identity',
    pattern         = 'image',
    pattern_type    = 'none',
    fill            = list.levels$colorRegion.Balco,
    colour          = 'black',
    pattern_scale   = -2,
    pattern_filter  = 'point',
    pattern_gravity = 'east'
  ) +
  theme_bw() +
  theme(legend.position = 'none') +
  labs(
    title = "Regions Play Rate",
    subtitle = "number of times a region is included in a deck",
    x = "Region",
    y = "Play Rate"
    # caption = "number of times a region is included in a deck"

  ) +
  theme( plot.title    = element_text(face = "bold", size = 15),
         plot.subtitle = element_text(size = 12),
         axis.title.x  = element_text(face = "bold", size = 12),
         axis.title.y  = element_text(face = "bold", size = 12),
         axis.text.x   = element_text(size = 8)
         ) +
  annotate(geom="text", x=1, y=0.15, col="black",label = paste("n =",nGames)) +
  coord_flip() +

  scale_pattern_filename_discrete(choices = regionIcons) +
  scale_pattern_discrete(guide = guide_legend(nrow = 1)) +
  scale_fill_manual("legend", values = list.levels$colorRegion.Balco) +
  scale_y_continuous(limits = c(0, round(max(Region.Freq$freq+0.04 ),3) ),
                     breaks = seq(0,0.5,0.04),
                     expand = c(-0.001,0.02),
                     labels = scales::percent_format(accuracy = 1) ) +
  guides(fill = "none") +
  geom_text(aes(label=sxLabel),
            hjust = 2, size = 5,position = position_dodge(width = 1)) +
  geom_text(aes(label=dxLabel),
            hjust = -0.5, size = 5,position = position_dodge(width = 1))
  # geom_text(aes(wt,mpg,label=carnames))
  # geom_text(data=subset(Region.Freq, freq > 0.03),
  #           hjust = 2, size = 5,position = position_dodge(width = 1))

RegionByRegion
```

### Table

```{r print-tableFreq}
# Region.Freq[,c("region","freq","n")] %>%
#   mutate(freq=as.character(paste0(freq*100,"%") ))  %>%
#   kable("html", escape = F, col.names = c("Region","Play Rate","N")) %>%
#   kable_styling(bootstrap_options = c("hover","condensed","responsive")) %>%
#   column_spec(2, bold = T)

Region.Freq[,c("region","freq")] %>%
  mutate(freq=as.character(paste0(freq*100,"%") )) %>%
  cbind(.,Region.Freq.Server) %>%
  mutate_if(is.numeric, funs(scales::percent(.,accuracy = 0.1)) ) %>%
  kable("html", escape = F, col.names = c("Region","Play Rate","America","Asia","Europe")) %>%
  kable_styling(bootstrap_options = c("hover","condensed","responsive")) %>%
  column_spec(c(1,2), bold = T)
```

---

## Play Rate by number of Cards {.tabset .tabset-fade .tabset-pills}

```{r process-tableFreq_byCard}

Card.Subset <- LoR.Melt.Matches.RMD %>%
  select( starts_with( "Card" ) ) %>%
  copy()

subCards <- as.data.table(apply(Card.Subset, c(1,2), function(x) str_sub(x,3,4) ))
subCards <- subCards %>% mutate_if(is.character, ~fct_recode(.,!!!recodeRegShort))

# anyNA(CardsRegion) #'*SEMPRE FALSE DEVE ESSERE*
# subCards %>% unlist(use.names = F) %>% tabyl() %>% setDT() %>% setnames(.,new = c("region","n","freq")) %>% mutate(.,region := as.character(region))

Regions.Freq.byCards <- subCards %>% unlist(use.names = FALSE) %>% tabyl(., show_na = F) %>% setDT() %>% setnames(.,new = c("region","n","freq")) %>% mutate(.,region := as.character(region))

# names(Regions.Freq.byCards)[1] <- "region"
# Regions.Freq.byCards <- Regions.Freq.byCards %>% mutate(region := as.character(region))

# se non lo faccio qui non posso ordinare e poi aggiungere i valori in ordine
setorderv(Regions.Freq.byCards, c("region"), c(1))

# Regions.Freq.byCards <- as.tibble(Regions.Freq.byCards)
Regions.Freq.byCards$freq <- round(Regions.Freq.byCards$freq,4)
Regions.Freq.byCards$icon <- list.levels$iconRegion

Regions.Freq.byCards.Server <- subCards %>%
  add_column(server = LoR.Melt.Matches.RMD$server) %>%
  melt(id.var=c("server")) %>%
  select(value,server) %>%
  tabyl(value,server, show_na = F) %>%
  adorn_percentages("col") %>%
  adorn_pct_formatting(digits = 2) %>% select(c(2,3,4))

Card.tableByRegPlot <- subCards %>%
  add_column(server = LoR.Melt.Matches.RMD$server) %>%
  melt(id.var=c("server")) %>%
  select(value,server) %>% table() %>% prop.table(.,margin = 2) %>% as.data.table()
```

### Plot

```{r plotRegion_byCards}

Regions.Freq.byCards$text <- format(Region.Freq$freq*100,2)

sxLabel_card <- format(Regions.Freq.byCards$freq*100,2)
dxLabel_card <- format(Regions.Freq.byCards$freq*100,2)
sxLabel_card <- ifelse(as.numeric(sxLabel_card) > 3,  sxLabel_card , "")
dxLabel_card <- ifelse(as.numeric(dxLabel_card) <= 3, dxLabel_card , "")

RegionByCards <- Regions.Freq.byCards %>%
  ggplot(aes(x = reorder(region, freq), y = freq)) +
  geom_bar_pattern(
    aes(
      pattern_filename = region,
    ),
    stat            = 'identity',
    pattern         = 'image',
    pattern_type    = 'none',
    fill            = list.levels$colorRegion.Balco,
    colour          = 'black',
    pattern_scale   = -2,
    pattern_filter  = 'point',
    pattern_gravity = 'east'
  ) +
  theme_bw() +
  theme(legend.position = 'none') +
  labs(
    title = "Regions Play Rate",
    subtitle = "number of times a card within a region is included in a deck",
    x = "Region",
    y = "Play Rate"
    # caption = "number of times a region is included in a deck"

  ) +
  theme( plot.title    = element_text(face = "bold", size = 15),
         plot.subtitle = element_text(size = 12),
         axis.title.x  = element_text(face = "bold", size = 12),
         axis.title.y  = element_text(face = "bold", size = 12),
         axis.text.x   = element_text(size = 8)
         ) +
  annotate(geom="text", x=1, y=0.15, col="black",label = paste("n =",nGames)) +
  coord_flip() +

  scale_pattern_filename_discrete(choices = regionIcons) +
  scale_pattern_discrete(guide = guide_legend(nrow = 1)) +
  scale_fill_manual("legend", values = list.levels$colorRegion.Balco) +
  # nome of the table
  scale_y_continuous(limits = c(0, round(max(Regions.Freq.byCards$freq+0.04 ),3) ),
                     breaks = seq(0,0.5,0.04),
                     expand = c(-0.001,0.02),
                     labels = scales::percent_format(accuracy = 1) ) +
  # geom_text(aes(label=format(freq*100,2)),
  #           hjust = 2, size = 5,position = position_dodge(width = 1)) +
  geom_text(aes(label=sxLabel_card),
            hjust = 2, size = 5,position = position_dodge(width = 1)) +
  geom_text(aes(label=dxLabel_card),
            hjust = -0.5, size = 5,position = position_dodge(width = 1)) +
  guides(fill = "none")

RegionByCards
```

### Table

```{r print-tableFreq_byCard }
Regions.Freq.byCards[,c("region","freq")] %>%
  mutate(freq=as.character(paste0(freq*100,"%") )) %>%
  cbind(.,Regions.Freq.byCards.Server) %>%
  kable("html", escape = F, col.names = c("Region","Play Rate","America","Asia","Europe")) %>%
  kable_styling(bootstrap_options = c("hover","condensed","responsive")) %>%
  column_spec(c(1,2), bold = T)
```

---

# Champions Combinations

```{r process-tableChampion}
#' ChampionCombo <- LoR.Melt.Matches.RMD[,.(factions,player)] %>% copy() #'@usare_questo
#' ChampionCombo <- LoR.Melt.Matches.RMD[,.(player)] %>% copy()
ChampionCombo <- LoR.Melt.Matches.RMD[,.(player)] %>% 
  copy()

CC.table <- ChampionCombo %>% as.vector() %>% tabyl(.,player) %>% setnames(c("player","n","freq"))
# %>% adorn_pct_formatting(digits = 2)

ChampionCombo.byReg <- data.table(player = as.vector(ChampionCombo),
                                  server = LoR.Melt.Matches.RMD$server)

CC.tableByReg <- ChampionCombo.byReg %>%
  melt(id.var=c("server")) %>%
  select(value,server) %>%
  tabyl(value,server) %>%
  adorn_percentages("col")
# %>%  adorn_pct_formatting(digits = 2)

CC.table <- CC.table %>% cbind(.,CC.tableByReg[,c("americas","asia","europe")])
```

## Play Rates {.tabset .tabset-fade .tabset-pills}

In this section I provide the play rate of which combinations of champions (plus the regions) are used in a deck. The champions showed right before a game starts for example. Right now it's a simple approximation of the archetypes played in the ladder as such information is not restrictive enough.

### Plot

```{r plot-Champion-PR}
nrowPlot <- 20

ChampionCombo.plot <- CC.table %>%
  arrange(desc(freq)) %>%
  slice_head(.,n = 20) %>%
  ggplot(aes(x = reorder(player, freq), y = freq))  +

  geom_bar( stat = "identity" ) +
  coord_flip() +
  guides(fill = "none")  +
  theme_bw() +
  geom_text(aes(label=round(freq*100,2)),
            # face = "bold",
            hjust = -0.5, size = 4,
            # vjust=-0.25
            # position = position_dodge(width = 1)
            position = position_dodge(0.9)
            ) +

  # scale_fill_manual("legend", values = list.levels$colorRegion.Balco) +
  scale_y_continuous(limits = c(0, round(max(CC.table$freq+0.04 ),3) ),
                     breaks = seq(0,0.20,0.02),
                     expand = c(-0.001,0.02),
                     labels = scales::percent_format(accuracy = 1) ) +

  theme( plot.title = element_text(face = "bold", size = 12, hjust = 0.6),
         axis.title.x = element_text(face = "bold"),
         axis.title.y = element_text(face = "bold"),
         legend.position = "none") +

  labs(x = "Champions", y = "Play Rate",
       caption = paste0("Relative frequencies of the top ",nrowPlot," combination of champions in a deck")
       ) +
  annotate(geom="text", x=2, y=0.10, col="black",label = paste("n =",nGames,"\n"," cumulative frequence = ",
                                                               paste0(CC.table %>% arrange(desc(freq)) %>% slice_head(.,n = 20) %>% select(freq) %>% sum() %>% round(.,4)*100 ,"%") )
           )

ChampionCombo.plot
```

### Table

```{r table-Champion-PR}
# CC.table[1:20,c("player","freq","americas","asia","europe")] %>%
#   mutate(freq=as.character(paste0(round(freq,4)*100,"%") )) %>%
#   # cbind(.,Regions.Freq.byCards.Server) %>%
#   kable("html", escape = F, col.names = c("Region","Play Rate","America","Asia","Europe")) %>%
#   kable_styling(bootstrap_options = c("hover","condensed","responsive")) %>%
#   column_spec(c(1,2), bold = T)

CC.table %>%
  arrange(desc(freq)) %>%
  # filter(nGames>100) %>%
  select(player,freq,americas,asia,europe) %>%
  datatable(., rownames = FALSE, colnames = c('Champions'='player','Play Rate'='freq','America'='americas','Asia'='asia','Europe'='europe')
            # options = list(order = list(list(3, 'desc'))
  ) %>%
  formatStyle('Play Rate', fontWeight = 'bold') %>%
  formatPercentage('Play Rate', 2) %>%
  formatPercentage('America', 2)   %>%
  formatPercentage('Asia', 2)      %>%
  formatPercentage('Europe', 2)

```

---

## Day by Day

The plot is no more interactive, it was fine but probably useless.
It still highlist (propably better) the top5 most played decks (at the moment of the last game played) and aside for reporting the values for each day the curves are relative for each game that was included.


```{r champion-freq-by-date}
m = 5

Champion.deck.daily <- (LoR.Melt.Matches.RMD %>%
  rename(.,"champions"="player") %>%
  arrange(game_start_time_utc) %>%
  select(game_start_time_utc,champions) %>%
  mutate( ntop5 = factor(champions) %>% as.numeric() ))[ , cumFreq := (cumsum(ntop5)/ntop5)/.I , by=champions ] %>%
  select(!ntop5)

fct_values <- LoR.Melt.Matches.RMD %>%
  rename(.,"champions"="player") %>%
  group_by(champions) %>%
  summarise( tot = n() ) %>% # arrange(desc(tot))
  mutate( top5 = fct_lump(champions, n = m, w = tot, ties.method = "max")) %>% pull(top5) %>% levels()
```

```{r plot-date-by-date}
ggplot() +
  geom_line(aes(game_start_time_utc, cumFreq, colour = champions), data = Champion.deck.daily ) +
  gghighlight::gghighlight(champions %in% fct_values[-(m+1)], label_key = champions) +
  ylim(NA,1) +
  labs(x = "Date",y = "Percent", title = "Evolution of Play Rate over time") +
  scale_x_datetime(date_minor_breaks = "1 day") +
  scale_y_continuous(limits = c(0, 0.3 ),
                     breaks = seq(0,0.3,0.05),
                     expand = c(-0.001,0.02),
                     labels = scales::percent_format(accuracy = 1) ) +
  theme( plot.title    = element_text(face = "bold", size = 15),
         axis.title.x  = element_text(face = "bold", size = 12),
         axis.title.y  = element_text(face = "bold", size = 12),
         axis.text.x   = element_text(size = 8)
         )
```

---

## Win Rates

Tie games are excluded

```{r get-muWR}
MUtbl <- LoR.Melt.Matches.RMD %>%
  
  filter(game_outcome!="tie") %>%
  select( player,opponent,game_outcome,server ) %>%
  group_by(player,opponent) %>%
  summarise( muWin   = sum(game_outcome=="win"),
             muGames = n(),
             muWR=mean(game_outcome=="win") ) %>%
  setDT()

MUtbl[, c("LCI","UCI") := binom.confint(muWin,muGames,0.95,methods="exact")[5:6] ]
MUtbl[, okCI:=(!between(0.50,LCI,UCI)) ]
MUtbl[, direction:=ifelse(muWR>0.50,"POS","NEG")  ]

MUtbl <- MUtbl %>%
  mutate( CI := glue("({percent(LCI,accuracy = 0.1)} - {percent(UCI,accuracy = 0.1)})" ) )
```

```{r process-winRate}
WR.DT <- MUtbl[, .(nWIN = sum(muWin),nGames = sum(muGames) ), by=player ]
WR.DT[ , WR:=nWIN/nGames ]
WR.DT[ , playrate:= nGames/sum(nGames) ]
```

Win rates of the most played combination of champions, against all decks, this week. This time I left all cases with more than 1000 games

```{r print-tableWinRate}

WR.DT %>%
  arrange(desc(WR)) %>%
  filter(nGames > 1000) %>%
  # filter(playrate > 0.01) %>%
  select(player,WR,nWIN,nGames,playrate) %>%
  datatable(., rownames = FALSE, colnames = c('Champions'='player','Win Rate'='WR','#Wins'='nWIN','#Games'='nGames','Play Rate'='playrate')) %>%
  formatPercentage('Win Rate', 1) %>%
  formatPercentage('Play Rate', 1)

```

---

## Underdog(?) Win Rates

Top Win rates of the least played combination of champions. Min 100 games (from 300 usually) and a play rate of less than 2% play rate

```{r print-under-tableWinRate}
WR.DT %>%
  arrange(desc(WR)) %>%
  filter(nGames>300 & WR > 0.50 & playrate < 0.02) %>%
  select(player,WR,nWIN,nGames,playrate) %>%
  datatable(., rownames = FALSE, colnames = c('Champions'='player','Win Rate'='WR','#Wins'='nWIN','#Games'='nGames','Play Rate'='playrate')
            # options = list(order = list(list(3, 'desc'))
  ) %>%
  formatPercentage('Win Rate', 1) %>%
  formatPercentage('Play Rate', 1)


```

---

# Match Ups {.tabset .tabset-fade .tabset-pills}

## Match-up 

The win rates on the grid are among the 10 most played champion combination. Match-ups with less than 300 games are not included

While this is one of the most interesting data for many the results are still heavily affected by the small sample size. They may be the 10 most played combination of champions but it's still a 100 cell grid. Also, while my approximation for archetypes usually works, this weeks more than usual, two decks are not well reported: Dragons and Azir/Noxus. In these two cases the inclusion of J4 / Garen / Zoe and Draven / Darius create different values for in the end it's the same deck with just a couple of different card. I already have an idea and part of the code how to solve this but will use it for next week. I could use Dr.LoR approach with bayesian statistics but I want to be consistent with my metholody in order to have a better comparison for my results. Of course I can still make changes in the future if the quality vastly improve with them.

```{r get-WR-Top10}
# echo=FALSE
Top10CC <- CC.table %>% arrange(desc(freq)) %>% slice_head(.,n = 10) %>% select(player) %>% pull()

WRTop10 <- MUtbl[ player %in% Top10CC & opponent %in% Top10CC, ]
WRTop10 <- setorderv(WRTop10, c("player","opponent"), c(1,1))

# WRTop10[ muGames<300 & player!=player,WR:=NA]
```

```{r tablesGrid}
grid <- matrix(WRTop10$muWR, nrow = 10, ncol = 10, byrow = T)
diag(grid) <- NA

# unique(WRTop10$opponent) == sort(Top10CC)

grid <- data.frame(grid)
```

```{r print-huxGrid}
brks <- c(0.4, 0.5, 0.5000001,0.6)
# clrs <- round(seq(255, 40, length.out = length(brks) + 1), 0) %>%
#   {paste0("rgb(255,", ., ",", ., ")")}

clrs = c( "#eca1a6", # red
          "#f9ccac", # red/orange
          "#ffe599", # orange (50)
          "#e3eaa7", # green
          "#b5e7a0" # darker green
          )

datatable(grid,
           colnames = sort(Top10CC),
           rownames = sort(Top10CC),
           options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            dom = 't', ordering=F,
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )

            )
          ) %>%
  formatStyle(names(grid), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(names(grid), 1) %>%
  formatStyle(names(grid), fontWeight = 'bold') %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "8pt")
```

---

## Match-up Table

Filtered cases with less than 30 games

```{r print-tableGrid}
MUtbl %>%
  filter(muGames>30) %>%
  mutate( player = factor(player) ) %>%
  mutate( opponent = factor(opponent) ) %>%
  # arrange(desc(games)) %>%
  select(player,opponent,muWR,muWin,muGames,CI) %>%
  datatable(., rownames = FALSE, colnames = c('Player'='player','Opponent'='opponent','Win Rate'='muWR','#Wins'='muWin','#Games'='muGames'),
            options = list(search = list(regex = TRUE, caseInsensitive = FALSE)),
            filter = list(position = 'top', clear = FALSE)
  ) %>%
  formatPercentage('Win Rate', 1)
```

## Match-up Table v2

Just a different way to print the table of the MU grid, more an experimentation

```{r prepare-flex}
library(flextable)
library(officer)

grid <- matrix(WRTop10$muWR, nrow = 10, ncol = 10, byrow = T)
diag(grid) <- NA

colnames(grid) <- Top10CC
colourer <- col_numeric(
  palette = c("#D73027", # red
          # "#f9ccac", # red/orange
          "white",
          # "#e3eaa7", # green
          "#1A9850" # darker green
          ),
  domain = c(0, 1))

# colourer <- function(x){
#   col_palette <- c("#D73027", "#F46D43", "#FDAE61", "#FEE08B", "white","#D9EF8B", "#A6D96A", "#66BD63", "#1A9850")
#   mycut <- cut(x, 
#     breaks = c(0, 0.124, 0.25, 0.375, 0.5, 0.625, 0.75, 0.875, 1), 
#     include.lowest = TRUE, label = FALSE)
#   col_palette[mycut]
# }


big_border   = fp_border(color="darkgray", width = 2)
small_border = fp_border(color="gray", width = 1)

dummy_fun <- function(x){
  ifelse( !is.na(x),sprintf( "%.0f%%", x*100 ),NA )
}
funs <- setNames(rep(list(dummy_fun), 10), Top10CC)
```


```{r print-flex}
ft <- grid %>% 
  as_tibble() %>%
  # mutate(across(everything(),~scales::percent(.x, accuracy = 0.1 ))) %>%
  add_column(.,Top10CC,.before = Top10CC[1]) %>%
  rename("MatchUps"="Top10CC") %>%
  flextable::flextable(.) %>% 
  theme_vanilla( ) %>%
  # theme_booktabs(bold_header = TRUE) %>% 
  flextable::align(.,align = "center", part = "all") %>%
  flextable::bg(.,
    bg = colourer,
    j = ~ . -MatchUps,
    part = "body") %>% 
  border_remove(x = .) %>%
  border_outer(., part="all", border = big_border ) %>%
  border_inner_h(., part="all", border = small_border ) %>%
  border_inner_v(., part="all", border = small_border ) %>%
  set_formatter(values = funs) %>%
  fontsize(., size = 8, part = "header") %>%
  fontsize(., j=1, size = 8) %>%
  autofit() 

ft
```

---

# Deck Structure of the week {.tabset .tabset-fade .tabset-pills}

Sivir with Zed is already quite popular so for this week I have chosen an "Underdog(?)" deck like "Draven / Riven" (soon to be Riven Akshan?) and "Jinx / Lulu"

Note: all deckcodes are limited to this week (sometimes I expand it to a bigger timeframe because of the low numbers)

## Draven / Riven (NX/PZ)

```{r Deck_structure}
# SubDeck_deck_code <- LoR.Melt.Matches.RMD %>% searchDecks(.,string = c("Ashe","LeBlanc")) %>% pull(deck_code)

SubDeck_deck_code <- LoR.Melt.Matches.RMD %>%
  filter( player == "Draven / Riven (NX/PZ)" ) %>%
  pull(deck_code)

SubDeck_row <- length(SubDeck_deck_code)
SubDeck_deck_structure <- getDeck_structure_tbl(SubDeck_deck_code)
SubDeck_deck_structure$Copies <- factor(SubDeck_deck_structure$Copies, levels = c(1,2,3))
```

```{r print_table_structure_SubDeck }

PrepareDT <- tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  rename(.,One=2,Two=3,Three=4) %>%
  # arrange(desc(Total),One,Two,Three) %>%
  mutate(., Play_Rate = as.numeric(str_extract_all(Total,  "(?<=\\().+?(?=\\))"))/SubDeck_row)

brks <- c(0.499999999,seq(0.50,1,0.01))
clrs = colorRampPalette( c("white","#629F62") )(length(brks)+1)

tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  select(1:4) %>%
  cbind(.,PrepareDT$Play_Rate) %>%
  rename(.,"One"=2,"Two"=3,"Three"=4,"Play_Rate"=5) %>%
  arrange(desc(Play_Rate),"Three","Two","One") %>%
  relocate(.,1,5,4,3,2) %>%
  datatable(.,
          colnames = c("Card","Plat Rate","3","2","1"),
          options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            # dom = 't',
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )
          )) %>%
  formatStyle(c("Play_Rate","Three","Two","One"), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(c("Play_Rate","Three","Two","One"), 1) %>%
  formatStyle(1, fontWeight = 'bold', fontSize = "10pt") %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "10pt")

```

---

## Jinx / Lulu

```{r Deck_structure-2}
# SubDeck_deck_code <- LoR.Melt.Matches.RMD %>% searchDecks(.,string = c("Ashe","LeBlanc")) %>% pull(deck_code)

SubDeck_deck_code <- LoR.Melt.Matches.RMD %>%
  filter( player == "Jinx / Lulu" ) %>%
  pull(deck_code)

SubDeck_row <- length(SubDeck_deck_code)
SubDeck_deck_structure <- getDeck_structure_tbl(SubDeck_deck_code)
SubDeck_deck_structure$Copies <- factor(SubDeck_deck_structure$Copies, levels = c(1,2,3))
```

```{r print_table_structure_SubDeck-2 }

PrepareDT <- tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  adorn_pct_formatting(digits = 1) %>%
  adorn_ns() %>%
  rename(.,One=2,Two=3,Three=4) %>%
  # arrange(desc(Total),One,Two,Three) %>%
  mutate(., Play_Rate = as.numeric(str_extract_all(Total,  "(?<=\\().+?(?=\\))"))/SubDeck_row)

brks <- c(0.499999999,seq(0.50,1,0.01))
clrs = colorRampPalette( c("white","#629F62") )(length(brks)+1)

tabyl(SubDeck_deck_structure,Name,Copies) %>%
  adorn_totals("col") %>%
  adorn_percentages("row") %>%
  select(1:4) %>%
  cbind(.,PrepareDT$Play_Rate) %>%
  rename(.,"One"=2,"Two"=3,"Three"=4,"Play_Rate"=5) %>%
  arrange(desc(Play_Rate),"Three","Two","One") %>%
  relocate(.,1,5,4,3,2) %>%
  datatable(.,
          colnames = c("Card","Plat Rate","3","2","1"),
          options = list(
            columnDefs = list(list(className = 'dt-center', targets = "_all")),
            # dom = 't',
            headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" )
          )) %>%
  formatStyle(c("Play_Rate","Three","Two","One"), backgroundColor = styleInterval(brks,clrs )) %>%
  formatPercentage(c("Play_Rate","Three","Two","One"), 1) %>%
  formatStyle(1, fontWeight = 'bold', fontSize = "10pt") %>%
  formatStyle(0, fontWeight = 'bold', fontSize = "10pt")

```

> How to read the table: <br>
- Play rate: How often a card is included in this class of decks / the table is order by this column. <br>
- 3/2/1 is the relative and absolute frequency of the number of copies in the decks that plays them <br>
- Frequencies from 50% to 100% are colored from shades of green to white to identify more easily the highest values

<!-- ## The meta and you -->

<!-- Patch 2-9 has been announced and many people are already calling the death of the game (coming from LoL not surprising at all). Let me say that I don't like the patch too much but mostly because I wanted a little nerf to the Watcher. Aside for that, if the Azir/Irelia nerf are even half as impactful as I think, the meta will shake up quite a lot. -->

<!-- The following values are the current WR of the top15 most played combination of champions (excluding Azir/Irelia), the WR those deck would have right now if Azir/Irelia didn't exist and the difference between those two. -->

<!-- ```{r WR-changes} -->

<!-- NoIrelia <- MUtbl %>% -->

<!--   filter(player != "Azir / Irelia" & opponent != "Azir / Irelia" )  -->

<!-- NoIrelia <- NoIrelia[, .(nWIN = sum(win),nGames = sum(games) ), by=player ][ , WR:=nWIN/nGames ][ , playrate:= nGames/sum(nGames) ] -->

<!-- Top15_deck <- CC.table %>% arrange(desc(freq)) %>% slice_head(n=16) %>% pull(player) -->

<!-- Top15_deck <- Top15_deck[Top15_deck != "Azir / Irelia"] -->

<!-- DT.Changes <- left_join(WR.DT[player %in% Top15_deck, .(player,WR)],NoIrelia[player %in% Top15_deck, .(player,WR)], by="player") -->

<!-- DT.Changes[,WRchange:=WR.y-WR.x] -->

<!-- DT.Changes %>%  -->

<!--   arrange(player) %>% -->

<!--   datatable(., rownames = FALSE, -->

<!--           colnames = c("Deck","WR","WR noIrelia","WR diff"), -->

<!--           options = list( -->

<!--             pageLength = 15, -->

<!--             # columnDefs = list(list(className = 'dt-center', targets = "_all")), -->

<!--             dom = 't', -->

<!--             autoWidth = TRUE -->

<!--             # scrollX = T -->

<!--             # headerCallback = DT::JS("function(thead) {","  $(thead).css('font-size', '8pt');","}" ) -->

<!--           )) %>%  -->

<!--   formatPercentage(2:4, 1) -->

<!--   # formatStyle(1, fontWeight = 'bold', fontSize = "10pt") -->

<!-- ``` -->

---

# LoR-Meta Index (LMI)

> The LMI [^3] is an Index I developed to measure the performance of decks in the metagame. For those who are familiar with basic statistical concept I wrote a document to explain the theory behind it: , it's very similar to [vicioussyndicate](https://www.vicioussyndicate.com) (vS) Meta Score from their data reaper report.
The score of each deck ***is not*** just their "strength", it takes in consideration both play rates and win rates that's why I prefer to say it measure the "performance".
The values range from 0 to 100 and the higher the value, the higher is the performance.

[^3]: [LMI - Early Theory](https://rpubs.com/Legna/775891)

```{r data-aggregation}
DT.Aggreation <- WR.DT %>%
  filter( nGames > 200 ) %>%
  # filter( playrate > 0.01 ) %>%
  mutate( freq_ind    = scale_quantile(playrate) ) %>%
  mutate( wr_ind      = scale_quantile(WR) ) %>%
  mutate( hmeta_ind   = apply(WR.DT[,.(freq_ind,wr_ind)],  1,function(x) harm.mean(x) ) )
```

```{r ggplotly-LMI,echo=FALSE}
textWRPR <- function(Deck,WR, playrate){
  glue("Deck: {Deck}\nWin Rate: {scales::percent(WR,accuracy = 0.1)}\nPlay Rate: {scales::percent(playrate,accuracy = 0.1)}")
}

f <- list(
  family = "Courier New, monospace",
  size = 18,
  color = "#7f7f7f"
)

fig <- DT.Aggreation %>%
  select(player,WR,playrate,wr_ind,freq_ind,hmeta_ind) %>%
  mutate_if(is.numeric, funs(round(., 4)) ) %>%
  mutate( tooltip = textWRPR(player,WR,playrate) ) %>%
  rename("Deck"="player","Win_Rate"="WR","Play_Rate"="playrate","WR Index"="wr_ind","Freq Index"="freq_ind","LMI"="hmeta_ind") %>%
  plot_ly(
    type = 'scatter',
    mode = 'markers',
    x = ~`WR Index`,
    y = ~`Freq Index`,
    marker = list(size = ~LMI*100, sizeref = 0.1, sizemode = 'area'),
    color = ~LMI,
    text = ~tooltip,
    hovertemplate = paste(
      "LMI:<b>%{marker.size:,}<br>",
      "<b>%{text}</b><br><extra></extra>",sep = ""
      # "%{yaxis.title.text}: %{y:$,.0f}<br>",
      # "%{xaxis.title.text}: %{x:.0%}<br>",
      # "Number Employed: %{marker.size:,}",
      # "<extra></extra>"
      )
    ) %>% layout(xaxis = list(title = "WR Index",titlefont = f),
                 yaxis = list(title = "Freq Index",titlefont = f),
                 title = 'LoR-Meta Index (LMI)'
                 ) %>% suppressWarnings()

fig
```

<!-- The following table are the values I used: -->

<!-- ```{r datatables-LMI} -->
<!-- DT.Aggreation %>% -->
<!--   select(player,wr_ind,freq_ind,hmeta_ind) %>% -->
<!--   arrange(desc(hmeta_ind)) %>% -->
<!--   # mutate(n=seq(1,NROW(DT.Aggreation),1), .before = deck) %>% -->
<!--   mutate_if(is.numeric, funs(round(., 4)) ) %>% -->
<!--   mutate(wr_ind = wr_ind*100) %>% -->
<!--   mutate(freq_ind = freq_ind*100) %>% -->
<!--   mutate(hmeta_ind = hmeta_ind*100) %>% -->
<!--   rename("Deck"="player","WR Index"="wr_ind","Freq Index"="freq_ind","LMI"="hmeta_ind") %>% -->
<!--   datatable(., rownames = FALSE, -->
<!--             options = list(dom = 't') -->
<!--   # filter = list(position = 'top', clear = FALSE) -->
<!--   ) %>% -->
<!--   formatRound('WR Index', 1) %>% -->
<!--   formatRound('Freq Index', 1) %>% -->
<!--   formatRound('LMI', 1) -->
<!-- ``` -->

---

# Cards Presence

```{r process-UniqueCards}
allCards            <- unlist(apply(Card.Subset, 1, unique),use.names = F)
TableAllCards       <- table(allCards)
RegionShortAllCards <- str_sub(names(TableAllCards),3,4)
TableCardsDT        <- data.table(TableAllCards)
setnames(TableCardsDT,old = "allCards",new = "card")

TableCardsDT[ ,region    := str_sub(card,3,4) ]
TableCardsDT[ ,regionID  := fct_recode(region,!!!recodeRegPosition) ]
TableCardsDT[ ,nGamesReg := Region.Freq$n[as.numeric(as.character(regionID))] ]
# Region.Freq contain the frequencies of appearence of each region in the decks
TableCardsDT[ ,p.byReg   := round(N/nGamesReg,3) ]
# Frequence of a card appearing in a deck within its own region

TableCardsDT[ ,card    :=fct_recode(card,   !!!recodeCardsCode)]
TableCardsDT[ ,region  :=fct_recode(region, !!!recodeRegShort)]
```

---

## Play Rates

```{r print-CardsTable-1}
MostPlayed <- TableCardsDT %>%
  arrange(desc(p.byReg)) %>%
  setNames(., c("Card","# Decks with that card ","Region","RegionID","Games of X Region","Play Rate")) %>%
  select(c(1,3,6,2)) %>%
  datatable(., rownames = FALSE) %>%
  formatStyle('Card', fontWeight = 'bold') %>%
  formatStyle('Play Rate', fontWeight = 'bold') %>%
  formatStyle('Play Rate', fontWeight = 'bold') %>% formatStyle(
    'Region',
    target = 'row',
    backgroundColor = styleEqual(list.levels$factions.clean, list.levels$colorRegion.Balco)
  ) %>%
  formatPercentage('Play Rate', 1)
  # formatStyle('Card',  color = 'red', backgroundColor = 'orange', fontWeight = 'bold')

MostPlayed
```

---

## Top 3 Play Rates by Region

```{r print-CardsTable-3}
TopPlayed.PbyReg <- TableCardsDT %>%
  group_by(region) %>%
  arrange(desc(p.byReg)) %>%
  top_n(3) %>%
  arrange(region) %>%
  setNames(., c("Card","N","Region","RegionID","Games of X Region","Play Rate")) %>%
  select(c(1,3,6,2,5)) %>%
  datatable( ., rownames = FALSE, options = list(
    searching = FALSE,
    lengthChange = FALSE,
    pageLength = 4*9,
    info = FALSE)) %>%
  formatStyle('Card', fontWeight = 'bold') %>%
  formatStyle('Play Rate', fontWeight = 'bold') %>%
  formatStyle('Play Rate', fontWeight = 'bold') %>% formatStyle(
    'Region',
    target = 'row',
    backgroundColor = styleEqual(list.levels$factions.clean, list.levels$colorRegion.Balco)
  ) %>%
  formatPercentage('Play Rate', 1)

  # kable("html", escape = F,
  #       col.names = c("Card","N","Region","RegionID","Games of X Region","Play Rate")[c(1,3,6,2,5)],
  #       caption = "Top3 most played cards in each Region") %>%
  # kable_styling(bootstrap_options = c("hover","condensed","responsive")) %>%
  # column_spec(c(1,2:3), bold = T)

TopPlayed.PbyReg
```

---

## Forgotten Cards

Cards that couldn't find place even in a meme deck.

```{r missingCards, results='asis'}
missingCards <- unname(recodeCardsCode)[unname(recodeCardsCode) %!in% names(TableAllCards)]
missingCards.DT <- data.table( Card = as.character(fct_recode(missingCards,!!!recodeCardsCode)),
                               Code = missingCards,
                               Region = str_sub(missingCards,3,4)
                              )

# missingCards.DT <- setorderv(missingCards.DT, c("Region","Card"), c(1,1))

missColNames <- c("Region",list.levels$factions.clean[list.levels$regionShort %in% missingCards.DT$Region])

missingTable <- t(missingCards.DT[,c(1,3)] %>%
              group_by(Region) %>%
              mutate(n = row_number()) %>%
              spread(n, Card) %>%
              mutate(across(everything(), .fns = ~replace_na(.,""))) %>%
              mutate(Region = list.levels$factions.clean[list.levels$regionShort %in% Region]  )  
              ) %>%
              # setnames(.,list.levels$factions.clean) %>%
  kable("html", escape = F ) %>%
  # kable("html", escape = F, col.names = missColNames ) %>%
  kable_styling(bootstrap_options = c("hover"))

row.names(missingTable) <- NULL
missingTable
```

# Legal bla bla {.unnumbered}

This Meta Report was created under Riot Games' "Legal Jibber Jabber" policy using assets owned by Riot Games. Riot Games does not endorse or sponsor this project.
